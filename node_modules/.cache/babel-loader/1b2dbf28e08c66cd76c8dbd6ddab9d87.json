{"ast":null,"code":"import _assertThisInitialized from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _possibleConstructorReturn from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/qiujizhao/Desktop/Fall 2019/ML/React/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as PIXI from 'pixi.js';\nimport { Rectangle, Point, Container, VERSION } from 'pixi.js';\n/**\r\n * @typedef ViewportTouch\r\n * @property {number} id\r\n * @property {PIXI.Point} last\r\n*/\n\n/**\r\n * handles all input for Viewport\r\n * @private\r\n */\n\nvar InputManager =\n/*#__PURE__*/\nfunction () {\n  function InputManager(viewport) {\n    _classCallCheck(this, InputManager);\n\n    this.viewport = viewport;\n    /**\r\n     * list of active touches on viewport\r\n     * @type {ViewportTouch[]}\r\n     */\n\n    this.touches = [];\n    this.addListeners();\n  }\n  /**\r\n   * add input listeners\r\n   * @private\r\n   */\n\n\n  _createClass(InputManager, [{\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this = this;\n\n      this.viewport.interactive = true;\n\n      if (!this.viewport.forceHitArea) {\n        this.viewport.hitArea = new Rectangle(0, 0, this.viewport.worldWidth, this.viewport.worldHeight);\n      }\n\n      this.viewport.on('pointerdown', this.down, this);\n      this.viewport.on('pointermove', this.move, this);\n      this.viewport.on('pointerup', this.up, this);\n      this.viewport.on('pointerupoutside', this.up, this);\n      this.viewport.on('pointercancel', this.up, this);\n      this.viewport.on('pointerout', this.up, this);\n\n      this.wheelFunction = function (e) {\n        return _this.handleWheel(e);\n      };\n\n      this.viewport.options.divWheel.addEventListener('wheel', this.wheelFunction, {\n        passive: this.viewport.options.passiveWheel\n      });\n      this.isMouseDown = false;\n    }\n    /**\r\n     * removes all event listeners from viewport\r\n     * (useful for cleanup of wheel when removing viewport)\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.viewport.options.divWheel.removeEventListener('wheel', this.wheelFunction);\n    }\n    /**\r\n     * handle down events for viewport\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     */\n\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n\n      if (event.data.pointerType === 'mouse') {\n        this.isMouseDown = true;\n      } else if (!this.get(event.data.pointerId)) {\n        this.touches.push({\n          id: event.data.pointerId,\n          last: null\n        });\n      }\n\n      if (this.count() === 1) {\n        this.last = event.data.global.clone(); // clicked event does not fire if viewport is decelerating or bouncing\n\n        var decelerate = this.viewport.plugins.get('decelerate');\n        var bounce = this.viewport.plugins.get('bounce');\n\n        if ((!decelerate || !decelerate.isActive()) && (!bounce || !bounce.isActive())) {\n          this.clickedAvailable = true;\n        } else {\n          this.clickedAvailable = false;\n        }\n      } else {\n        this.clickedAvailable = false;\n      }\n\n      var stop = this.viewport.plugins.down(event);\n\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n    /**\r\n     * @param {number} change\r\n     * @returns whether change exceeds threshold\r\n     */\n\n  }, {\n    key: \"checkThreshold\",\n    value: function checkThreshold(change) {\n      if (Math.abs(change) >= this.viewport.threshold) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * handle move events for viewport\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n\n      var stop = this.viewport.plugins.move(event);\n\n      if (this.clickedAvailable) {\n        var distX = event.data.global.x - this.last.x;\n        var distY = event.data.global.y - this.last.y;\n\n        if (this.checkThreshold(distX) || this.checkThreshold(distY)) {\n          this.clickedAvailable = false;\n        }\n      }\n\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n    /**\r\n     * handle up events for viewport\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     */\n\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      }\n\n      if (event.data.pointerType === 'mouse') {\n        this.isMouseDown = false;\n      }\n\n      if (event.data.pointerType !== 'mouse') {\n        this.remove(event.data.pointerId);\n      }\n\n      var stop = this.viewport.plugins.up(event);\n\n      if (this.clickedAvailable && this.count() === 0) {\n        this.viewport.emit('clicked', {\n          screen: this.last,\n          world: this.viewport.toWorld(this.last),\n          viewport: this\n        });\n        this.clickedAvailable = false;\n      }\n\n      if (stop && this.viewport.options.stopPropagation) {\n        event.stopPropagation();\n      }\n    }\n    /**\r\n     * gets pointer position if this.interaction is set\r\n     * @param {WheelEvent} event\r\n     * @return {PIXI.Point}\r\n     */\n\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition(event) {\n      var point = new Point();\n\n      if (this.viewport.options.interaction) {\n        this.viewport.options.interaction.mapPositionToPoint(point, event.clientX, event.clientY);\n      } else {\n        point.x = event.clientX;\n        point.y = event.clientY;\n      }\n\n      return point;\n    }\n    /**\r\n     * handle wheel events\r\n     * @param {WheelEvent} event\r\n     */\n\n  }, {\n    key: \"handleWheel\",\n    value: function handleWheel(event) {\n      if (this.viewport.pause || !this.viewport.worldVisible) {\n        return;\n      } // only handle wheel events where the mouse is over the viewport\n\n\n      var point = this.viewport.toLocal(this.getPointerPosition(event));\n\n      if (this.viewport.left <= point.x && point.x <= this.viewport.right && this.viewport.top <= point.y && point.y <= this.viewport.bottom) {\n        var stop = this.viewport.plugins.wheel(event);\n\n        if (stop) {\n          event.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.touches = [];\n      this.isMouseDown = false;\n    }\n    /**\r\n     * get touch by id\r\n     * @param {number} id\r\n     * @return {ViewportTouch}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.touches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var touch = _step.value;\n\n          if (touch.id === id) {\n            return touch;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\r\n     * remove touch by number\r\n     * @param {number} id\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      for (var i = 0; i < this.touches.length; i++) {\n        if (this.touches[i].id === id) {\n          this.touches.splice(i, 1);\n          return;\n        }\n      }\n    }\n    /**\r\n     * @returns {number} count of mouse/touch pointers that are down on the viewport\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      return (this.isMouseDown ? 1 : 0) + this.touches.length;\n    }\n  }]);\n\n  return InputManager;\n}();\n\nvar PLUGIN_ORDER = ['drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'bounce', 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'];\n/**\r\n * Use this to access current plugins or add user-defined plugins\r\n */\n\nvar PluginManager =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * instantiated by Viewport\r\n   * @param {Viewport} viewport\r\n   */\n  function PluginManager(viewport) {\n    _classCallCheck(this, PluginManager);\n\n    this.viewport = viewport;\n    this.list = [];\n    this.plugins = {};\n  }\n  /**\r\n   * Inserts a named plugin or a user plugin into the viewport\r\n   * default plugin order: 'drag', 'pinch', 'wheel', 'follow', 'mouse-edges', 'decelerate', 'bounce', 'snap-zoom', 'clamp-zoom', 'snap', 'clamp'\r\n   * @param {string} name of plugin\r\n   * @param {Plugin} plugin - instantiated Plugin class\r\n   * @param {number} index to insert userPlugin (otherwise inserts it at the end)\r\n   */\n\n\n  _createClass(PluginManager, [{\n    key: \"add\",\n    value: function add(name, plugin) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PLUGIN_ORDER.length;\n      this.plugins[name] = plugin;\n      var current = PLUGIN_ORDER.indexOf(name);\n\n      if (current !== -1) {\n        PLUGIN_ORDER.splice(current, 1);\n      }\n\n      PLUGIN_ORDER.splice(index, 0, name);\n      this.sort();\n    }\n    /**\r\n     * get plugin\r\n     * @param {string} name of plugin\r\n     * @return {Plugin}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this.plugins[name];\n    }\n    /**\r\n     * update all active plugins\r\n     * @private\r\n     * @param {number} elapsed type in milliseconds since last update\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var plugin = _step2.value;\n          plugin.update(elapsed);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n    /**\r\n     * resize all active plugins\r\n     * @private\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var plugin = _step3.value;\n          plugin.resize();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n    /**\r\n     * clamps and resets bounce and decelerate (as needed) after manually moving viewport\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = this.list[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var plugin = _step4.value;\n          plugin.reset();\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n    /**\r\n     * removes installed plugin\r\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      if (this.plugins[name]) {\n        this.plugins[name] = null;\n        this.viewport.emit(name + '-remove');\n        this.sort();\n      }\n    }\n    /**\r\n     * pause plugin\r\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(name) {\n      if (this.plugins[name]) {\n        this.plugins[name].pause();\n      }\n    }\n    /**\r\n     * resume plugin\r\n     * @param {string} name of plugin (e.g., 'drag', 'pinch')\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume(name) {\n      if (this.plugins[name]) {\n        this.plugins[name].resume();\n      }\n    }\n    /**\r\n     * sort plugins according to PLUGIN_ORDER\r\n     * @private\r\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.list = [];\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = PLUGIN_ORDER[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var plugin = _step5.value;\n\n          if (this.plugins[plugin]) {\n            this.list.push(this.plugins[plugin]);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n    /**\r\n     * handle down for all plugins\r\n     * @private\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      var stop = false;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this.list[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var plugin = _step6.value;\n\n          if (plugin.down(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return stop;\n    }\n    /**\r\n     * handle move for all plugins\r\n     * @private\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      var stop = false;\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = this.viewport.plugins.list[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var plugin = _step7.value;\n\n          if (plugin.move(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      return stop;\n    }\n    /**\r\n     * handle up for all plugins\r\n     * @private\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"up\",\n    value: function up(event) {\n      var stop = false;\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = this.list[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var plugin = _step8.value;\n\n          if (plugin.up(event)) {\n            stop = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      return stop;\n    }\n    /**\r\n     * handle wheel event for all plugins\r\n     * @private\r\n     * @param {WheelEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"wheel\",\n    value: function wheel(e) {\n      var result = false;\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = this.list[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var plugin = _step9.value;\n\n          if (plugin.wheel(e)) {\n            result = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PluginManager;\n}();\n/**\r\n * derive this class to create user-defined plugins\r\n */\n\n\nvar Plugin =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {Viewport} parent\r\n   */\n  function Plugin(parent) {\n    _classCallCheck(this, Plugin);\n\n    this.parent = parent;\n    this.paused = false;\n  }\n  /** called when plugin is removed */\n\n\n  _createClass(Plugin, [{\n    key: \"destroy\",\n    value: function destroy() {}\n    /**\r\n     * handler for pointerdown PIXI event\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"down\",\n    value: function down() {\n      return false;\n    }\n    /**\r\n     * handler for pointermove PIXI event\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"move\",\n    value: function move() {\n      return false;\n    }\n    /**\r\n     * handler for pointerup PIXI event\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"up\",\n    value: function up() {\n      return false;\n    }\n    /**\r\n     * handler for wheel event on div\r\n     * @param {WheelEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      return false;\n    }\n    /**\r\n     * called on each tick\r\n     * @param {number} elapsed time in millisecond since last update\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {}\n    /** called when the viewport is resized */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {}\n    /** called when the viewport is manually moved */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n    /** pause the plugin */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n    /** un-pause the plugin */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }]);\n\n  return Plugin;\n}();\n/**\r\n * @typedef {object} LastDrag\r\n * @property {number} x\r\n * @property {number} y\r\n * @property {PIXI.Point} parent\r\n */\n\n/**\r\n * @typedef DragOptions\r\n * @property {string} [direction=all] direction to drag\r\n * @property {boolean} [wheel=true] use wheel to scroll in y direction(unless wheel plugin is active)\r\n * @property {number} [wheelScroll=1] number of pixels to scroll with each wheel spin\r\n * @property {boolean} [reverse] reverse the direction of the wheel scroll\r\n * @property {(boolean|string)} [clampWheel=false] clamp wheel(to avoid weird bounce with mouse wheel)\r\n * @property {string} [underflow=center] where to place world if too small for screen\r\n * @property {number} [factor=1] factor to multiply drag to increase the speed of movement\r\n * @property {string} [mouseButtons=all] changes which mouse buttons trigger drag, use: 'all', 'left', right' 'middle', or some combination, like, 'middle-right'; you may want to set viewport.options.disableOnContextMenu if you want to use right-click dragging\r\n * @property {string[]} [keyToPress=null] array containing {@link key|https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code} codes of keys that can be pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}.\r\n * @property {boolean} [ignoreKeyToPressOnTouch=false] ignore keyToPress for touch events\r\n */\n\n\nvar dragOptions = {\n  direction: 'all',\n  wheel: true,\n  wheelScroll: 1,\n  reverse: false,\n  clampWheel: false,\n  underflow: 'center',\n  factor: 1,\n  mouseButtons: 'all',\n  keyToPress: null,\n  ignoreKeyToPressOnTouch: false\n};\n/**\r\n * @private\r\n */\n\nvar Drag =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inherits(Drag, _Plugin);\n\n  /**\r\n   * @param {Viewport} parent\r\n   * @param {DragOptions} options\r\n   */\n  function Drag(parent) {\n    var _this2;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Drag);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Drag).call(this, parent));\n    _this2.options = Object.assign({}, dragOptions, options);\n    _this2.moved = false;\n    _this2.reverse = _this2.options.reverse ? 1 : -1;\n    _this2.xDirection = !_this2.options.direction || _this2.options.direction === 'all' || _this2.options.direction === 'x';\n    _this2.yDirection = !_this2.options.direction || _this2.options.direction === 'all' || _this2.options.direction === 'y';\n    _this2.keyIsPressed = false;\n\n    _this2.parseUnderflow();\n\n    _this2.mouseButtons(_this2.options.mouseButtons);\n\n    if (_this2.options.keyToPress) {\n      _this2.handleKeyPresses(_this2.options.keyToPress);\n    }\n\n    return _this2;\n  }\n  /**\r\n   * Handles keypress events and set the keyIsPressed boolean accordingly\r\n   * @param {array} codes - key codes that can be used to trigger drag event\r\n   */\n\n\n  _createClass(Drag, [{\n    key: \"handleKeyPresses\",\n    value: function handleKeyPresses(codes) {\n      var _this3 = this;\n\n      parent.addEventListener(\"keydown\", function (e) {\n        if (codes.includes(e.code)) _this3.keyIsPressed = true;\n      });\n      parent.addEventListener(\"keyup\", function (e) {\n        if (codes.includes(e.code)) _this3.keyIsPressed = false;\n      });\n    }\n    /**\r\n     * initialize mousebuttons array\r\n     * @param {string} buttons\r\n     */\n\n  }, {\n    key: \"mouseButtons\",\n    value: function mouseButtons(buttons) {\n      if (!buttons || buttons === 'all') {\n        this.mouse = [true, true, true];\n      } else {\n        this.mouse = [buttons.indexOf('left') === -1 ? false : true, buttons.indexOf('middle') === -1 ? false : true, buttons.indexOf('right') === -1 ? false : true];\n      }\n    }\n  }, {\n    key: \"parseUnderflow\",\n    value: function parseUnderflow() {\n      var clamp = this.options.underflow.toLowerCase();\n\n      if (clamp === 'center') {\n        this.underflowX = 0;\n        this.underflowY = 0;\n      } else {\n        this.underflowX = clamp.indexOf('left') !== -1 ? -1 : clamp.indexOf('right') !== -1 ? 1 : 0;\n        this.underflowY = clamp.indexOf('top') !== -1 ? -1 : clamp.indexOf('bottom') !== -1 ? 1 : 0;\n      }\n    }\n    /**\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"checkButtons\",\n    value: function checkButtons(event) {\n      var isMouse = event.data.pointerType === 'mouse';\n      var count = this.parent.input.count();\n\n      if (count === 1 || count > 1 && !this.parent.plugins.get('pinch')) {\n        if (!isMouse || this.mouse[event.data.button]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"checkKeyPress\",\n    value: function checkKeyPress(event) {\n      if (!this.options.keyToPress || this.keyIsPressed || this.options.ignoreKeyToPressOnTouch && event.data.pointerType === 'touch') return true;\n      return false;\n    }\n    /**\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     */\n\n  }, {\n    key: \"down\",\n    value: function down(event) {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.checkButtons(event) && this.checkKeyPress(event)) {\n        this.last = {\n          x: event.data.global.x,\n          y: event.data.global.y\n        };\n        this.current = event.data.pointerId;\n        return true;\n      } else {\n        this.last = null;\n      }\n    }\n  }, {\n    key: \"move\",\n\n    /**\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     */\n    value: function move(event) {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.last && this.current === event.data.pointerId) {\n        var x = event.data.global.x;\n        var y = event.data.global.y;\n        var count = this.parent.input.count();\n\n        if (count === 1 || count > 1 && !this.parent.plugins.get('pinch')) {\n          var distX = x - this.last.x;\n          var distY = y - this.last.y;\n\n          if (this.moved || this.xDirection && this.parent.input.checkThreshold(distX) || this.yDirection && this.parent.input.checkThreshold(distY)) {\n            var newPoint = {\n              x: x,\n              y: y\n            };\n\n            if (this.xDirection) {\n              this.parent.x += (newPoint.x - this.last.x) * this.options.factor;\n            }\n\n            if (this.yDirection) {\n              this.parent.y += (newPoint.y - this.last.y) * this.options.factor;\n            }\n\n            this.last = newPoint;\n\n            if (!this.moved) {\n              this.parent.emit('drag-start', {\n                screen: new Point(this.last.x, this.last.y),\n                world: this.parent.toWorld(new Point(this.last.x, this.last.y)),\n                viewport: this.parent\n              });\n            }\n\n            this.moved = true;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'drag'\n            });\n            return true;\n          }\n        } else {\n          this.moved = false;\n        }\n      }\n    }\n    /**\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.paused) {\n        return;\n      }\n\n      var touches = this.parent.input.touches;\n\n      if (touches.length === 1) {\n        var pointer = touches[0];\n\n        if (pointer.last) {\n          this.last = {\n            x: pointer.last.x,\n            y: pointer.last.y\n          };\n          this.current = pointer.id;\n        }\n\n        this.moved = false;\n        return true;\n      } else if (this.last) {\n        if (this.moved) {\n          var screen = new Point(this.last.x, this.last.y);\n          this.parent.emit('drag-end', {\n            screen: screen,\n            world: this.parent.toWorld(screen),\n            viewport: this.parent\n          });\n          this.last = null;\n          this.moved = false;\n          return true;\n        }\n      }\n    }\n    /**\r\n     * @param {WheelEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"wheel\",\n    value: function wheel(event) {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.options.wheel) {\n        var wheel = this.parent.plugins.get('wheel');\n\n        if (!wheel) {\n          if (this.xDirection) {\n            this.parent.x += event.deltaX * this.options.wheelScroll * this.reverse;\n          }\n\n          if (this.yDirection) {\n            this.parent.y += event.deltaY * this.options.wheelScroll * this.reverse;\n          }\n\n          if (this.options.clampWheel) {\n            this.clamp();\n          }\n\n          this.parent.emit('wheel-scroll', this.parent);\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            type: 'wheel'\n          });\n\n          if (!this.parent.options.passiveWheel) {\n            event.preventDefault();\n          }\n\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.last = null;\n      this.paused = false;\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      var decelerate = this.parent.plugins.get('decelerate') || {};\n\n      if (this.options.clampWheel !== 'y') {\n        if (this.parent.screenWorldWidth < this.parent.screenWidth) {\n          switch (this.underflowX) {\n            case -1:\n              this.parent.x = 0;\n              break;\n\n            case 1:\n              this.parent.x = this.parent.screenWidth - this.parent.screenWorldWidth;\n              break;\n\n            default:\n              this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n          }\n        } else {\n          if (this.parent.left < 0) {\n            this.parent.x = 0;\n            decelerate.x = 0;\n          } else if (this.parent.right > this.parent.worldWidth) {\n            this.parent.x = -this.parent.worldWidth * this.parent.scale.x + this.parent.screenWidth;\n            decelerate.x = 0;\n          }\n        }\n      }\n\n      if (this.options.clampWheel !== 'x') {\n        if (this.parent.screenWorldHeight < this.parent.screenHeight) {\n          switch (this.underflowY) {\n            case -1:\n              this.parent.y = 0;\n              break;\n\n            case 1:\n              this.parent.y = this.parent.screenHeight - this.parent.screenWorldHeight;\n              break;\n\n            default:\n              this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n          }\n        } else {\n          if (this.parent.top < 0) {\n            this.parent.y = 0;\n            decelerate.y = 0;\n          }\n\n          if (this.parent.bottom > this.parent.worldHeight) {\n            this.parent.y = -this.parent.worldHeight * this.parent.scale.y + this.parent.screenHeight;\n            decelerate.y = 0;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.moved;\n    }\n  }]);\n\n  return Drag;\n}(Plugin);\n/**\r\n * @typedef {object} PinchOptions\r\n * @property {boolean} [noDrag] disable two-finger dragging\r\n * @property {number} [percent=1.0] percent to modify pinch speed\r\n * @property {PIXI.Point} [center] place this point at center during zoom instead of center of two fingers\r\n */\n\n\nvar pinchOptions = {\n  noDrag: false,\n  percent: 1.0,\n  center: null\n};\n\nvar Pinch =\n/*#__PURE__*/\nfunction (_Plugin2) {\n  _inherits(Pinch, _Plugin2);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {PinchOptions} [options]\r\n   */\n  function Pinch(parent) {\n    var _this4;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Pinch);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Pinch).call(this, parent));\n    _this4.options = Object.assign({}, pinchOptions, options);\n    return _this4;\n  }\n\n  _createClass(Pinch, [{\n    key: \"down\",\n    value: function down() {\n      if (this.parent.input.count() >= 2) {\n        this.active = true;\n        return true;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(e) {\n      if (this.paused || !this.active) {\n        return;\n      }\n\n      var x = e.data.global.x;\n      var y = e.data.global.y;\n      var pointers = this.parent.input.touches;\n\n      if (pointers.length >= 2) {\n        var first = pointers[0];\n        var second = pointers[1];\n        var last = first.last && second.last ? Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2)) : null;\n\n        if (first.id === e.data.pointerId) {\n          first.last = {\n            x: x,\n            y: y,\n            data: e.data\n          };\n        } else if (second.id === e.data.pointerId) {\n          second.last = {\n            x: x,\n            y: y,\n            data: e.data\n          };\n        }\n\n        if (last) {\n          var oldPoint;\n          var point = {\n            x: first.last.x + (second.last.x - first.last.x) / 2,\n            y: first.last.y + (second.last.y - first.last.y) / 2\n          };\n\n          if (!this.options.center) {\n            oldPoint = this.parent.toLocal(point);\n          }\n\n          var dist = Math.sqrt(Math.pow(second.last.x - first.last.x, 2) + Math.pow(second.last.y - first.last.y, 2));\n          var change = (dist - last) / this.parent.screenWidth * this.parent.scale.x * this.options.percent;\n          this.parent.scale.x += change;\n          this.parent.scale.y += change;\n          this.parent.emit('zoomed', {\n            viewport: this.parent,\n            type: 'pinch'\n          });\n          var clamp = this.parent.plugins.get('clamp-zoom');\n\n          if (clamp) {\n            clamp.clamp();\n          }\n\n          if (this.options.center) {\n            this.parent.moveCenter(this.options.center);\n          } else {\n            var newPoint = this.parent.toGlobal(oldPoint);\n            this.parent.x += point.x - newPoint.x;\n            this.parent.y += point.y - newPoint.y;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'pinch'\n            });\n          }\n\n          if (!this.options.noDrag && this.lastCenter) {\n            this.parent.x += point.x - this.lastCenter.x;\n            this.parent.y += point.y - this.lastCenter.y;\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'pinch'\n            });\n          }\n\n          this.lastCenter = point;\n          this.moved = true;\n        } else {\n          if (!this.pinching) {\n            this.parent.emit('pinch-start', this.parent);\n            this.pinching = true;\n          }\n        }\n\n        return true;\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.pinching) {\n        if (this.parent.input.touches.length <= 1) {\n          this.active = false;\n          this.lastCenter = null;\n          this.pinching = false;\n          this.moved = false;\n          this.parent.emit('pinch-end', this.parent);\n          return true;\n        }\n      }\n    }\n  }]);\n\n  return Pinch;\n}(Plugin);\n/**\r\n * @typedef ClampOptions\r\n * @property {(number|boolean)} [left=false] clamp left; true = 0\r\n * @property {(number|boolean)} [right=false] clamp right; true = viewport.worldWidth\r\n * @property {(number|boolean)} [top=false] clamp top; true = 0\r\n * @property {(number|boolean)} [bottom=false] clamp bottom; true = viewport.worldHeight\r\n * @property {string} [direction] (all, x, or y) using clamps of [0, viewport.worldWidth/viewport.worldHeight]; replaces left/right/top/bottom if set\r\n * @property {string} [underflow=center] where to place world if too small for screen (e.g., top-right, center, none, bottomleft)\r\n */\n\n\nvar clampOptions = {\n  left: false,\n  right: false,\n  top: false,\n  bottom: false,\n  direction: null,\n  underflow: 'center'\n};\n\nvar Clamp =\n/*#__PURE__*/\nfunction (_Plugin3) {\n  _inherits(Clamp, _Plugin3);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {ClampOptions} [options]\r\n   */\n  function Clamp(parent) {\n    var _this5;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Clamp);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Clamp).call(this, parent));\n    _this5.options = Object.assign({}, clampOptions, options);\n\n    if (_this5.options.direction) {\n      _this5.options.left = _this5.options.direction === 'x' || _this5.options.direction === 'all' ? true : null;\n      _this5.options.right = _this5.options.direction === 'x' || _this5.options.direction === 'all' ? true : null;\n      _this5.options.top = _this5.options.direction === 'y' || _this5.options.direction === 'all' ? true : null;\n      _this5.options.bottom = _this5.options.direction === 'y' || _this5.options.direction === 'all' ? true : null;\n    }\n\n    _this5.parseUnderflow();\n\n    _this5.last = {\n      x: null,\n      y: null,\n      scaleX: null,\n      scaleY: null\n    };\n\n    _this5.update();\n\n    return _this5;\n  }\n\n  _createClass(Clamp, [{\n    key: \"parseUnderflow\",\n    value: function parseUnderflow() {\n      var clamp = this.options.underflow.toLowerCase();\n\n      if (clamp === 'none') {\n        this.noUnderflow = true;\n      } else if (clamp === 'center') {\n        this.underflowX = this.underflowY = 0;\n        this.noUnderflow = false;\n      } else {\n        this.underflowX = clamp.indexOf('left') !== -1 ? -1 : clamp.indexOf('right') !== -1 ? 1 : 0;\n        this.underflowY = clamp.indexOf('top') !== -1 ? -1 : clamp.indexOf('bottom') !== -1 ? 1 : 0;\n        this.noUnderflow = false;\n      }\n    }\n    /**\r\n     * handle move events\r\n     * @param {PIXI.interaction.InteractionEvent} event\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"move\",\n    value: function move() {\n      this.update();\n      return false;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.paused) {\n        return;\n      } // only clamp on change\n\n\n      if (this.parent.x === this.last.x && this.parent.y === this.last.y && this.parent.scale.x === this.last.scaleX && this.parent.scale.y === this.last.scaleY) {\n        return;\n      }\n\n      var original = {\n        x: this.parent.x,\n        y: this.parent.y\n      };\n      var decelerate = this.parent.plugins['decelerate'] || {};\n\n      if (this.options.left !== null || this.options.right !== null) {\n        var moved = false;\n\n        if (this.parent.screenWorldWidth < this.parent.screenWidth) {\n          if (!this.noUnderflow) {\n            switch (this.underflowX) {\n              case -1:\n                if (this.parent.x !== 0) {\n                  this.parent.x = 0;\n                  moved = true;\n                }\n\n                break;\n\n              case 1:\n                if (this.parent.x !== this.parent.screenWidth - this.parent.screenWorldWidth) {\n                  this.parent.x = this.parent.screenWidth - this.parent.screenWorldWidth;\n                  moved = true;\n                }\n\n                break;\n\n              default:\n                if (this.parent.x !== (this.parent.screenWidth - this.parent.screenWorldWidth) / 2) {\n                  this.parent.x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n                  moved = true;\n                }\n\n            }\n          }\n        } else {\n          if (this.options.left !== null) {\n            if (this.parent.left < (this.options.left === true ? 0 : this.options.left)) {\n              this.parent.x = -(this.options.left === true ? 0 : this.options.left) * this.parent.scale.x;\n              decelerate.x = 0;\n              moved = true;\n            }\n          }\n\n          if (this.options.right !== null) {\n            if (this.parent.right > (this.options.right === true ? this.parent.worldWidth : this.options.right)) {\n              this.parent.x = -(this.options.right === true ? this.parent.worldWidth : this.options.right) * this.parent.scale.x + this.parent.screenWidth;\n              decelerate.x = 0;\n              moved = true;\n            }\n          }\n        }\n\n        if (moved) {\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            original: original,\n            type: 'clamp-x'\n          });\n        }\n      }\n\n      if (this.options.top !== null || this.options.bottom !== null) {\n        var _moved = false;\n\n        if (this.parent.screenWorldHeight < this.parent.screenHeight) {\n          if (!this.noUnderflow) {\n            switch (this.underflowY) {\n              case -1:\n                if (this.parent.y !== 0) {\n                  this.parent.y = 0;\n                  _moved = true;\n                }\n\n                break;\n\n              case 1:\n                if (this.parent.y !== this.parent.screenHeight - this.parent.screenWorldHeight) {\n                  this.parent.y = this.parent.screenHeight - this.parent.screenWorldHeight;\n                  _moved = true;\n                }\n\n                break;\n\n              default:\n                if (this.parent.y !== (this.parent.screenHeight - this.parent.screenWorldHeight) / 2) {\n                  this.parent.y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n                  _moved = true;\n                }\n\n            }\n          }\n        } else {\n          if (this.options.top !== null) {\n            if (this.parent.top < (this.options.top === true ? 0 : this.options.top)) {\n              this.parent.y = -(this.options.top === true ? 0 : this.options.top) * this.parent.scale.y;\n              decelerate.y = 0;\n              _moved = true;\n            }\n          }\n\n          if (this.options.bottom !== null) {\n            if (this.parent.bottom > (this.options.bottom === true ? this.parent.worldHeight : this.options.bottom)) {\n              this.parent.y = -(this.options.bottom === true ? this.parent.worldHeight : this.options.bottom) * this.parent.scale.y + this.parent.screenHeight;\n              decelerate.y = 0;\n              _moved = true;\n            }\n          }\n        }\n\n        if (_moved) {\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            original: original,\n            type: 'clamp-y'\n          });\n        }\n      }\n\n      this.last.x = this.parent.x;\n      this.last.y = this.parent.y;\n      this.last.scaleX = this.parent.scale.x;\n      this.last.scaleY = this.parent.scale.y;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.update();\n    }\n  }]);\n\n  return Clamp;\n}(Plugin);\n/**\r\n * @typedef {object} ClampZoomOptions\r\n * @property {number} [minWidth] minimum width\r\n * @property {number} [minHeight] minimum height\r\n * @property {number} [maxWidth] maximum width\r\n * @property {number} [maxHeight] maximum height\r\n */\n\n\nvar clampZoomOptions = {\n  minWidth: null,\n  minHeight: null,\n  maxWidth: null,\n  maxHeight: null\n};\n\nvar ClampZoom =\n/*#__PURE__*/\nfunction (_Plugin4) {\n  _inherits(ClampZoom, _Plugin4);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {ClampZoomOptions} [options]\r\n   */\n  function ClampZoom(parent) {\n    var _this6;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ClampZoom);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(ClampZoom).call(this, parent));\n    _this6.options = Object.assign({}, clampZoomOptions, options);\n\n    _this6.clamp();\n\n    return _this6;\n  }\n\n  _createClass(ClampZoom, [{\n    key: \"resize\",\n    value: function resize() {\n      this.clamp();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      if (this.paused) {\n        return;\n      }\n\n      var width = this.parent.worldScreenWidth;\n      var height = this.parent.worldScreenHeight;\n\n      if (this.options.minWidth !== null && width < this.options.minWidth) {\n        var original = this.parent.scale.x;\n        this.parent.fitWidth(this.options.minWidth, false, false, true);\n        this.parent.scale.y *= this.parent.scale.x / original;\n        width = this.parent.worldScreenWidth;\n        height = this.parent.worldScreenHeight;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'clamp-zoom'\n        });\n      }\n\n      if (this.options.maxWidth !== null && width > this.options.maxWidth) {\n        var _original = this.parent.scale.x;\n        this.parent.fitWidth(this.options.maxWidth, false, false, true);\n        this.parent.scale.y *= this.parent.scale.x / _original;\n        width = this.parent.worldScreenWidth;\n        height = this.parent.worldScreenHeight;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'clamp-zoom'\n        });\n      }\n\n      if (this.options.minHeight !== null && height < this.options.minHeight) {\n        var _original2 = this.parent.scale.y;\n        this.parent.fitHeight(this.options.minHeight, false, false, true);\n        this.parent.scale.x *= this.parent.scale.y / _original2;\n        width = this.parent.worldScreenWidth;\n        height = this.parent.worldScreenHeight;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'clamp-zoom'\n        });\n      }\n\n      if (this.options.maxHeight !== null && height > this.options.maxHeight) {\n        var _original3 = this.parent.scale.y;\n        this.parent.fitHeight(this.options.maxHeight, false, false, true);\n        this.parent.scale.x *= this.parent.scale.y / _original3;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'clamp-zoom'\n        });\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.clamp();\n    }\n  }]);\n\n  return ClampZoom;\n}(Plugin);\n/**\r\n * @typedef {object} DecelerateOptions\r\n * @property {number} [friction=0.95] percent to decelerate after movement\r\n * @property {number} [bounce=0.8] percent to decelerate when past boundaries (only applicable when viewport.bounce() is active)\r\n * @property {number} [minSpeed=0.01] minimum velocity before stopping/reversing acceleration\r\n */\n\n\nvar decelerateOptions = {\n  friction: 0.95,\n  bounce: 0.8,\n  minSpeed: 0.01\n};\n\nvar Decelerate =\n/*#__PURE__*/\nfunction (_Plugin5) {\n  _inherits(Decelerate, _Plugin5);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {DecelerateOptions} [options]\r\n   */\n  function Decelerate(parent) {\n    var _this7;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Decelerate);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Decelerate).call(this, parent));\n    _this7.options = Object.assign({}, decelerateOptions, options);\n    _this7.saved = [];\n\n    _this7.reset();\n\n    _this7.parent.on('moved', function (data) {\n      return _this7.moved(data);\n    });\n\n    return _this7;\n  }\n\n  _createClass(Decelerate, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.parent;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      this.saved = [];\n      this.x = this.y = false;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.x || this.y;\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      if (this.paused) {\n        return;\n      }\n\n      var count = this.parent.input.count();\n\n      if (count === 1 || count > 1 && !this.parent.plugins.get('pinch')) {\n        this.saved.push({\n          x: this.parent.x,\n          y: this.parent.y,\n          time: performance.now()\n        });\n\n        if (this.saved.length > 60) {\n          this.saved.splice(0, 30);\n        }\n      }\n    }\n  }, {\n    key: \"moved\",\n    value: function moved(data) {\n      if (this.saved.length) {\n        var last = this.saved[this.saved.length - 1];\n\n        if (data.type === 'clamp-x') {\n          if (last.x === data.original.x) {\n            last.x = this.parent.x;\n          }\n        } else if (data.type === 'clamp-y') {\n          if (last.y === data.original.y) {\n            last.y = this.parent.y;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.parent.input.count() === 0 && this.saved.length) {\n        var now = performance.now();\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = this.saved[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var save = _step10.value;\n\n            if (save.time >= now - 100) {\n              var time = now - save.time;\n              this.x = (this.parent.x - save.x) / time;\n              this.y = (this.parent.y - save.y) / time;\n              this.percentChangeX = this.percentChangeY = this.options.friction;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n      }\n    }\n    /**\r\n     * manually activate plugin\r\n     * @param {object} options\r\n     * @param {number} [options.x]\r\n     * @param {number} [options.y]\r\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate(options) {\n      options = options || {};\n\n      if (typeof options.x !== 'undefined') {\n        this.x = options.x;\n        this.percentChangeX = this.options.friction;\n      }\n\n      if (typeof options.y !== 'undefined') {\n        this.y = options.y;\n        this.percentChangeY = this.options.friction;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      var moved;\n\n      if (this.x) {\n        this.parent.x += this.x * elapsed;\n        this.x *= this.percentChangeX;\n\n        if (Math.abs(this.x) < this.options.minSpeed) {\n          this.x = 0;\n        }\n\n        moved = true;\n      }\n\n      if (this.y) {\n        this.parent.y += this.y * elapsed;\n        this.y *= this.percentChangeY;\n\n        if (Math.abs(this.y) < this.options.minSpeed) {\n          this.y = 0;\n        }\n\n        moved = true;\n      }\n\n      if (moved) {\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'decelerate'\n        });\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.x = this.y = null;\n    }\n  }]);\n\n  return Decelerate;\n}(Plugin);\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar penner = createCommonjsModule(function (module, exports) {\n  /*\n  \tCopyright © 2001 Robert Penner\n  \tAll rights reserved.\n  \n  \tRedistribution and use in source and binary forms, with or without modification, \n  \tare permitted provided that the following conditions are met:\n  \n  \tRedistributions of source code must retain the above copyright notice, this list of \n  \tconditions and the following disclaimer.\n  \tRedistributions in binary form must reproduce the above copyright notice, this list \n  \tof conditions and the following disclaimer in the documentation and/or other materials \n  \tprovided with the distribution.\n  \n  \tNeither the name of the author nor the names of contributors may be used to endorse \n  \tor promote products derived from this software without specific prior written permission.\n  \n  \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n  \tEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n  \tMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n  \tCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  \tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n  \tGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n  \tAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  \tNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n  \tOF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n  (function () {\n    var penner, umd;\n\n    umd = function umd(factory) {\n      {\n        return module.exports = factory;\n      }\n    };\n\n    penner = {\n      linear: function linear(t, b, c, d) {\n        return c * t / d + b;\n      },\n      easeInQuad: function easeInQuad(t, b, c, d) {\n        return c * (t /= d) * t + b;\n      },\n      easeOutQuad: function easeOutQuad(t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n      },\n      easeInOutQuad: function easeInOutQuad(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t + b;\n        } else {\n          return -c / 2 * (--t * (t - 2) - 1) + b;\n        }\n      },\n      easeInCubic: function easeInCubic(t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n      },\n      easeOutCubic: function easeOutCubic(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n      },\n      easeInOutCubic: function easeInOutCubic(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * t + 2) + b;\n        }\n      },\n      easeInQuart: function easeInQuart(t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n      },\n      easeOutQuart: function easeOutQuart(t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n      },\n      easeInOutQuart: function easeInOutQuart(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t * t + b;\n        } else {\n          return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n        }\n      },\n      easeInQuint: function easeInQuint(t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n      },\n      easeOutQuint: function easeOutQuint(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n      },\n      easeInOutQuint: function easeInOutQuint(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * t * t * t * t * t + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n        }\n      },\n      easeInSine: function easeInSine(t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n      },\n      easeOutSine: function easeOutSine(t, b, c, d) {\n        return c * Math.sin(t / d * (Math.PI / 2)) + b;\n      },\n      easeInOutSine: function easeInOutSine(t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n      },\n      easeInExpo: function easeInExpo(t, b, c, d) {\n        if (t === 0) {\n          return b;\n        } else {\n          return c * Math.pow(2, 10 * (t / d - 1)) + b;\n        }\n      },\n      easeOutExpo: function easeOutExpo(t, b, c, d) {\n        if (t === d) {\n          return b + c;\n        } else {\n          return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n        }\n      },\n      easeInOutExpo: function easeInOutExpo(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n        } else {\n          return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n        }\n      },\n      easeInCirc: function easeInCirc(t, b, c, d) {\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n      },\n      easeOutCirc: function easeOutCirc(t, b, c, d) {\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n      },\n      easeInOutCirc: function easeInOutCirc(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n          return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n        } else {\n          return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n        }\n      },\n      easeInElastic: function easeInElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d) === 1) ;\n\n        if (!p) {\n          p = d * .3;\n        }\n\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n      },\n      easeOutElastic: function easeOutElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d) === 1) ;\n\n        if (!p) {\n          p = d * .3;\n        }\n\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n\n        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n      },\n      easeInOutElastic: function easeInOutElastic(t, b, c, d) {\n        var a, p, s;\n        s = 1.70158;\n        p = 0;\n        a = c;\n        if (t === 0) ;else if ((t /= d / 2) === 2) ;\n\n        if (!p) {\n          p = d * (.3 * 1.5);\n        }\n\n        if (a < Math.abs(c)) {\n          a = c;\n          s = p / 4;\n        } else {\n          s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n\n        if (t < 1) {\n          return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n        } else {\n          return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n        }\n      },\n      easeInBack: function easeInBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n      },\n      easeOutBack: function easeOutBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n      },\n      easeInOutBack: function easeInOutBack(t, b, c, d, s) {\n        if (s === void 0) {\n          s = 1.70158;\n        }\n\n        if ((t /= d / 2) < 1) {\n          return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n        } else {\n          return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n        }\n      },\n      easeInBounce: function easeInBounce(t, b, c, d) {\n        var v;\n        v = penner.easeOutBounce(d - t, 0, c, d);\n        return c - v + b;\n      },\n      easeOutBounce: function easeOutBounce(t, b, c, d) {\n        if ((t /= d) < 1 / 2.75) {\n          return c * (7.5625 * t * t) + b;\n        } else if (t < 2 / 2.75) {\n          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;\n        } else if (t < 2.5 / 2.75) {\n          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;\n        } else {\n          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;\n        }\n      },\n      easeInOutBounce: function easeInOutBounce(t, b, c, d) {\n        var v;\n\n        if (t < d / 2) {\n          v = penner.easeInBounce(t * 2, 0, c, d);\n          return v * .5 + b;\n        } else {\n          v = penner.easeOutBounce(t * 2 - d, 0, c, d);\n          return v * .5 + c * .5 + b;\n        }\n      }\n    };\n    umd(penner);\n  }).call(commonjsGlobal);\n});\n/**\r\n * returns correct Penner equation using string or Function\r\n * @param {(function|string)} [ease]\r\n * @param {defaults} default penner equation to use if none is provided\r\n */\n\nfunction ease(ease, defaults) {\n  if (!ease) {\n    return penner[defaults];\n  } else if (typeof ease === 'function') {\n    return ease;\n  } else if (typeof ease === 'string') {\n    return penner[ease];\n  }\n}\n/**\r\n * @typedef {options} BounceOptions\r\n * @property {string} [sides=all] all, horizontal, vertical, or combination of top, bottom, right, left (e.g., 'top-bottom-right')\r\n * @property {number} [friction=0.5] friction to apply to decelerate if active\r\n * @property {number} [time=150] time in ms to finish bounce\r\n * @property {object} [bounceBox] use this bounceBox instead of (0, 0, viewport.worldWidth, viewport.worldHeight)\r\n * @property {number} [bounceBox.x=0]\r\n * @property {number} [bounceBox.y=0]\r\n * @property {number} [bounceBox.width=viewport.worldWidth]\r\n * @property {number} [bounceBox.height=viewport.worldHeight]\r\n * @property {string|function} [ease=easeInOutSine] ease function or name (see http://easings.net/ for supported names)\r\n * @property {string} [underflow=center] (top/bottom/center and left/right/center, or center) where to place world if too small for screen\r\n */\n\n\nvar bounceOptions = {\n  sides: 'all',\n  friction: 0.5,\n  time: 150,\n  ease: 'easeInOutSine',\n  underflow: 'center',\n  bounceBox: null\n};\n\nvar Bounce =\n/*#__PURE__*/\nfunction (_Plugin6) {\n  _inherits(Bounce, _Plugin6);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {BounceOptions} [options]\r\n   * @fires bounce-start-x\r\n   * @fires bounce.end-x\r\n   * @fires bounce-start-y\r\n   * @fires bounce-end-y\r\n   */\n  function Bounce(parent) {\n    var _this8;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Bounce);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Bounce).call(this, parent));\n    _this8.options = Object.assign({}, bounceOptions, options);\n    _this8.ease = ease(_this8.options.ease, 'easeInOutSine');\n\n    if (_this8.options.sides) {\n      if (_this8.options.sides === 'all') {\n        _this8.top = _this8.bottom = _this8.left = _this8.right = true;\n      } else if (_this8.options.sides === 'horizontal') {\n        _this8.right = _this8.left = true;\n      } else if (_this8.options.sides === 'vertical') {\n        _this8.top = _this8.bottom = true;\n      } else {\n        _this8.top = _this8.options.sides.indexOf('top') !== -1;\n        _this8.bottom = _this8.options.sides.indexOf('bottom') !== -1;\n        _this8.left = _this8.options.sides.indexOf('left') !== -1;\n        _this8.right = _this8.options.sides.indexOf('right') !== -1;\n      }\n    }\n\n    _this8.parseUnderflow();\n\n    _this8.last = {};\n\n    _this8.reset();\n\n    return _this8;\n  }\n\n  _createClass(Bounce, [{\n    key: \"parseUnderflow\",\n    value: function parseUnderflow() {\n      var clamp = this.options.underflow.toLowerCase();\n\n      if (clamp === 'center') {\n        this.underflowX = 0;\n        this.underflowY = 0;\n      } else {\n        this.underflowX = clamp.indexOf('left') !== -1 ? -1 : clamp.indexOf('right') !== -1 ? 1 : 0;\n        this.underflowY = clamp.indexOf('top') !== -1 ? -1 : clamp.indexOf('bottom') !== -1 ? 1 : 0;\n      }\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.toX !== null || this.toY !== null;\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      this.toX = this.toY = null;\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      this.bounce();\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      this.bounce();\n\n      if (this.toX) {\n        var toX = this.toX;\n        toX.time += elapsed;\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'bounce-x'\n        });\n\n        if (toX.time >= this.options.time) {\n          this.parent.x = toX.end;\n          this.toX = null;\n          this.parent.emit('bounce-x-end', this.parent);\n        } else {\n          this.parent.x = this.ease(toX.time, toX.start, toX.delta, this.options.time);\n        }\n      }\n\n      if (this.toY) {\n        var toY = this.toY;\n        toY.time += elapsed;\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'bounce-y'\n        });\n\n        if (toY.time >= this.options.time) {\n          this.parent.y = toY.end;\n          this.toY = null;\n          this.parent.emit('bounce-y-end', this.parent);\n        } else {\n          this.parent.y = this.ease(toY.time, toY.start, toY.delta, this.options.time);\n        }\n      }\n    }\n  }, {\n    key: \"calcUnderflowX\",\n    value: function calcUnderflowX() {\n      var x;\n\n      switch (this.underflowX) {\n        case -1:\n          x = 0;\n          break;\n\n        case 1:\n          x = this.parent.screenWidth - this.parent.screenWorldWidth;\n          break;\n\n        default:\n          x = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;\n      }\n\n      return x;\n    }\n  }, {\n    key: \"calcUnderflowY\",\n    value: function calcUnderflowY() {\n      var y;\n\n      switch (this.underflowY) {\n        case -1:\n          y = 0;\n          break;\n\n        case 1:\n          y = this.parent.screenHeight - this.parent.screenWorldHeight;\n          break;\n\n        default:\n          y = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;\n      }\n\n      return y;\n    }\n  }, {\n    key: \"oob\",\n    value: function oob() {\n      var box = this.options.bounceBox;\n\n      if (box) {\n        var x1 = typeof box.x === 'undefined' ? 0 : box.x;\n        var y1 = typeof box.y === 'undefined' ? 0 : box.y;\n        var width = typeof box.width === 'undefined' ? this.parent.worldWidth : box.width;\n        var height = typeof box.height === 'undefined' ? this.parent.worldHeight : box.height;\n        return {\n          left: this.parent.left < x1,\n          right: this.parent.right > width,\n          top: this.parent.top < y1,\n          bottom: this.parent.bottom > height,\n          topLeft: new Point(x1 * this.parent.scale.x, y1 * this.parent.scale.y),\n          bottomRight: new Point(width * this.parent.scale.x - this.parent.screenWidth, height * this.parent.scale.y - this.parent.screenHeight)\n        };\n      }\n\n      return {\n        left: this.parent.left < 0,\n        right: this.parent.right > this.parent.worldWidth,\n        top: this.parent.top < 0,\n        bottom: this.parent.bottom > this.parent.worldHeight,\n        topLeft: new Point(0, 0),\n        bottomRight: new Point(this.parent.worldWidth * this.parent.scale.x - this.parent.screenWidth, this.parent.worldHeight * this.parent.scale.y - this.parent.screenHeight)\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value: function bounce() {\n      if (this.paused) {\n        return;\n      }\n\n      var oob;\n      var decelerate = this.parent.plugins.get('decelerate');\n\n      if (decelerate && (decelerate.x || decelerate.y)) {\n        if (decelerate.x && decelerate.percentChangeX === decelerate.options.friction || decelerate.y && decelerate.percentChangeY === decelerate.options.friction) {\n          oob = this.oob();\n\n          if (oob.left && this.left || oob.right && this.right) {\n            decelerate.percentChangeX = this.options.friction;\n          }\n\n          if (oob.top && this.top || oob.bottom && this.bottom) {\n            decelerate.percentChangeY = this.options.friction;\n          }\n        }\n      }\n\n      var drag = this.parent.plugins.get('drag') || {};\n      var pinch = this.parent.plugins.get('pinch') || {};\n      decelerate = decelerate || {};\n\n      if (!drag.active && !pinch.active && (!this.toX || !this.toY) && (!decelerate.x || !decelerate.y)) {\n        oob = oob || this.oob();\n        var topLeft = oob.topLeft;\n        var bottomRight = oob.bottomRight;\n\n        if (!this.toX && !decelerate.x) {\n          var x = null;\n\n          if (oob.left && this.left) {\n            x = this.parent.screenWorldWidth < this.parent.screenWidth ? this.calcUnderflowX() : -topLeft.x;\n          } else if (oob.right && this.right) {\n            x = this.parent.screenWorldWidth < this.parent.screenWidth ? this.calcUnderflowX() : -bottomRight.x;\n          }\n\n          if (x !== null && this.parent.x !== x) {\n            this.toX = {\n              time: 0,\n              start: this.parent.x,\n              delta: x - this.parent.x,\n              end: x\n            };\n            this.parent.emit('bounce-x-start', this.parent);\n          }\n        }\n\n        if (!this.toY && !decelerate.y) {\n          var y = null;\n\n          if (oob.top && this.top) {\n            y = this.parent.screenWorldHeight < this.parent.screenHeight ? this.calcUnderflowY() : -topLeft.y;\n          } else if (oob.bottom && this.bottom) {\n            y = this.parent.screenWorldHeight < this.parent.screenHeight ? this.calcUnderflowY() : -bottomRight.y;\n          }\n\n          if (y !== null && this.parent.y !== y) {\n            this.toY = {\n              time: 0,\n              start: this.parent.y,\n              delta: y - this.parent.y,\n              end: y\n            };\n            this.parent.emit('bounce-y-start', this.parent);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.toX = this.toY = null;\n      this.bounce();\n    }\n  }]);\n\n  return Bounce;\n}(Plugin);\n/**\r\n * @typedef SnapOptions\r\n * @property {boolean} [topLeft] snap to the top-left of viewport instead of center\r\n * @property {number} [friction=0.8] friction/frame to apply if decelerate is active\r\n * @property {number} [time=1000]\r\n * @property {string|function} [ease=easeInOutSine] ease function or name (see http://easings.net/ for supported names)\r\n * @property {boolean} [interrupt=true] pause snapping with any user input on the viewport\r\n * @property {boolean} [removeOnComplete] removes this plugin after snapping is complete\r\n * @property {boolean} [removeOnInterrupt] removes this plugin if interrupted by any user input\r\n * @property {boolean} [forceStart] starts the snap immediately regardless of whether the viewport is at the desired location\r\n */\n\n\nvar snapOptions = {\n  topLeft: false,\n  friction: 0.8,\n  time: 1000,\n  ease: 'easeInOutSine',\n  interrupt: true,\n  removeOnComplete: false,\n  removeOnInterrupt: false,\n  forceStart: false\n};\n\nvar Snap =\n/*#__PURE__*/\nfunction (_Plugin7) {\n  _inherits(Snap, _Plugin7);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {SnapOptions} [options]\r\n   * @event snap-start(Viewport) emitted each time a snap animation starts\r\n   * @event snap-restart(Viewport) emitted each time a snap resets because of a change in viewport size\r\n   * @event snap-end(Viewport) emitted each time snap reaches its target\r\n   * @event snap-remove(Viewport) emitted if snap plugin is removed\r\n   */\n  function Snap(parent, x, y) {\n    var _this9;\n\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, Snap);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(Snap).call(this, parent));\n    _this9.options = Object.assign({}, snapOptions, options);\n    _this9.ease = ease(options.ease, 'easeInOutSine');\n    _this9.x = x;\n    _this9.y = y;\n\n    if (_this9.options.forceStart) {\n      _this9.snapStart();\n    }\n\n    return _this9;\n  }\n\n  _createClass(Snap, [{\n    key: \"snapStart\",\n    value: function snapStart() {\n      this.percent = 0;\n      this.snapping = {\n        time: 0\n      };\n      var current = this.options.topLeft ? this.parent.corner : this.parent.center;\n      this.deltaX = this.x - current.x;\n      this.deltaY = this.y - current.y;\n      this.startX = current.x;\n      this.startY = current.y;\n      this.parent.emit('snap-start', this.parent);\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap');\n      }\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap');\n      } else if (this.options.interrupt) {\n        this.snapping = null;\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.parent.input.count() === 0) {\n        var decelerate = this.parent.plugins.get('decelerate');\n\n        if (decelerate && (decelerate.x || decelerate.y)) {\n          decelerate.percentChangeX = decelerate.percentChangeY = this.options.friction;\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.options.interrupt && this.parent.input.count() !== 0) {\n        return;\n      }\n\n      if (!this.snapping) {\n        var current = this.options.topLeft ? this.parent.corner : this.parent.center;\n\n        if (current.x !== this.x || current.y !== this.y) {\n          this.snapStart();\n        }\n      } else {\n        var snapping = this.snapping;\n        snapping.time += elapsed;\n        var finished, x, y;\n\n        if (snapping.time > this.options.time) {\n          finished = true;\n          x = this.startX + this.deltaX;\n          y = this.startY + this.deltaY;\n        } else {\n          var percent = this.ease(snapping.time, 0, 1, this.options.time);\n          x = this.startX + this.deltaX * percent;\n          y = this.startY + this.deltaY * percent;\n        }\n\n        if (this.options.topLeft) {\n          this.parent.moveCorner(x, y);\n        } else {\n          this.parent.moveCenter(x, y);\n        }\n\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'snap'\n        });\n\n        if (finished) {\n          if (this.options.removeOnComplete) {\n            this.parent.plugins.remove('snap');\n          }\n\n          this.parent.emit('snap-end', this.parent);\n          this.snapping = null;\n        }\n      }\n    }\n  }]);\n\n  return Snap;\n}(Plugin);\n/**\r\n * @typedef {Object} SnapZoomOptions\r\n * @property {number} [width=0] the desired width to snap (to maintain aspect ratio, choose only width or height)\r\n * @property {number} [height=0] the desired height to snap (to maintain aspect ratio, choose only width or height)\r\n * @property {number} [time=1000] time for snapping in ms\r\n * @property {(string|function)} [ease=easeInOutSine] ease function or name (see http://easings.net/ for supported names)\r\n * @property {PIXI.Point} [center] place this point at center during zoom instead of center of the viewport\r\n * @property {boolean} [interrupt=true] pause snapping with any user input on the viewport\r\n * @property {boolean} [removeOnComplete] removes this plugin after snapping is complete\r\n * @property {boolean} [removeOnInterrupt] removes this plugin if interrupted by any user input\r\n * @property {boolean} [forceStart] starts the snap immediately regardless of whether the viewport is at the desired zoom\r\n * @property {boolean} [noMove] zoom but do not move\r\n */\n\n\nvar snapZoomOptions = {\n  width: 0,\n  height: 0,\n  time: 1000,\n  ease: 'easeInOutSine',\n  center: null,\n  interrupt: true,\n  removeOnComplete: false,\n  removeOnInterrupts: false,\n  forceStart: false,\n  noMove: false\n};\n\nvar SnapZoom =\n/*#__PURE__*/\nfunction (_Plugin8) {\n  _inherits(SnapZoom, _Plugin8);\n\n  /**\r\n   * @param {Viewport} parent\r\n   * @param {SnapZoomOptions} options\r\n   * @event snap-zoom-start(Viewport) emitted each time a fit animation starts\r\n   * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\r\n   * @event snap-zoom-end(Viewport) emitted each time fit reaches its target\r\n   */\n  function SnapZoom(parent) {\n    var _this10;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SnapZoom);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(SnapZoom).call(this, parent));\n    _this10.options = Object.assign({}, snapZoomOptions, options);\n    _this10.ease = ease(_this10.options.ease);\n\n    if (_this10.options.width > 0) {\n      _this10.xScale = parent.screenWidth / _this10.options.width;\n    }\n\n    if (_this10.options.height > 0) {\n      _this10.yScale = parent.screenHeight / _this10.options.height;\n    }\n\n    _this10.xIndependent = _this10.xScale ? true : false;\n    _this10.yIndependent = _this10.yScale ? true : false;\n    _this10.xScale = _this10.xIndependent ? _this10.xScale : _this10.yScale;\n    _this10.yScale = _this10.yIndependent ? _this10.yScale : _this10.xScale;\n\n    if (_this10.options.time === 0) {\n      parent.container.scale.x = _this10.xScale;\n      parent.container.scale.y = _this10.yScale;\n\n      if (_this10.options.removeOnComplete) {\n        _this10.parent.plugins.remove('snap-zoom');\n      }\n    } else if (options.forceStart) {\n      _this10.createSnapping();\n    }\n\n    return _this10;\n  }\n\n  _createClass(SnapZoom, [{\n    key: \"createSnapping\",\n    value: function createSnapping() {\n      var scale = this.parent.scale;\n      this.snapping = {\n        time: 0,\n        startX: scale.x,\n        startY: scale.y,\n        deltaX: this.xScale - scale.x,\n        deltaY: this.yScale - scale.y\n      };\n      this.parent.emit('snap-zoom-start', this.parent);\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.snapping = null;\n\n      if (this.options.width > 0) {\n        this.xScale = this.parent.screenWidth / this.options.width;\n      }\n\n      if (this.options.height > 0) {\n        this.yScale = this.parent.screenHeight / this.options.height;\n      }\n\n      this.xScale = this.xIndependent ? this.xScale : this.yScale;\n      this.yScale = this.yIndependent ? this.yScale : this.xScale;\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap-zoom');\n      }\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (this.options.removeOnInterrupt) {\n        this.parent.plugins.remove('snap-zoom');\n      } else if (this.options.interrupt) {\n        this.snapping = null;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.options.interrupt && this.parent.input.count() !== 0) {\n        return;\n      }\n\n      var oldCenter;\n\n      if (!this.options.center && !this.options.noMove) {\n        oldCenter = this.parent.center;\n      }\n\n      if (!this.snapping) {\n        if (this.parent.scale.x !== this.xScale || this.parent.scale.y !== this.yScale) {\n          this.createSnapping();\n        }\n      } else if (this.snapping) {\n        var snapping = this.snapping;\n        snapping.time += elapsed;\n\n        if (snapping.time >= this.options.time) {\n          this.parent.scale.set(this.xScale, this.yScale);\n\n          if (this.options.removeOnComplete) {\n            this.parent.plugins.remove('snap-zoom');\n          }\n\n          this.parent.emit('snap-zoom-end', this.parent);\n          this.snapping = null;\n        } else {\n          var _snapping = this.snapping;\n          this.parent.scale.x = this.ease(_snapping.time, _snapping.startX, _snapping.deltaX, this.options.time);\n          this.parent.scale.y = this.ease(_snapping.time, _snapping.startY, _snapping.deltaY, this.options.time);\n        }\n\n        var clamp = this.parent.plugins.get('clamp-zoom');\n\n        if (clamp) {\n          clamp.clamp();\n        }\n\n        if (!this.options.noMove) {\n          if (!this.options.center) {\n            this.parent.moveCenter(oldCenter);\n          } else {\n            this.parent.moveCenter(this.options.center);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.snapping = null;\n\n      _get(_getPrototypeOf(SnapZoom.prototype), \"resume\", this).call(this);\n    }\n  }]);\n\n  return SnapZoom;\n}(Plugin);\n/**\r\n * @typedef {object} FollowOptions\r\n * @property {number} [speed=0] to follow in pixels/frame (0=teleport to location)\r\n * @property {number} [acceleration] set acceleration to accelerate and decelerate at this rate; speed cannot be 0 to use acceleration\r\n * @property {number} [radius] radius (in world coordinates) of center circle where movement is allowed without moving the viewport\r\n */\n\n\nvar followOptions = {\n  speed: 0,\n  acceleration: null,\n  radius: null\n};\n\nvar Follow =\n/*#__PURE__*/\nfunction (_Plugin9) {\n  _inherits(Follow, _Plugin9);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {PIXI.DisplayObject} target to follow\r\n   * @param {FollowOptions} [options]\r\n   */\n  function Follow(parent, target) {\n    var _this11;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Follow);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Follow).call(this, parent));\n    _this11.target = target;\n    _this11.options = Object.assign({}, followOptions, options);\n    _this11.velocity = {\n      x: 0,\n      y: 0\n    };\n    return _this11;\n  }\n\n  _createClass(Follow, [{\n    key: \"update\",\n    value: function update(elapsed) {\n      if (this.paused) {\n        return;\n      }\n\n      var center = this.parent.center;\n      var toX = this.target.x,\n          toY = this.target.y;\n\n      if (this.options.radius) {\n        var distance = Math.sqrt(Math.pow(this.target.y - center.y, 2) + Math.pow(this.target.x - center.x, 2));\n\n        if (distance > this.options.radius) {\n          var angle = Math.atan2(this.target.y - center.y, this.target.x - center.x);\n          toX = this.target.x - Math.cos(angle) * this.options.radius;\n          toY = this.target.y - Math.sin(angle) * this.options.radius;\n        } else {\n          return;\n        }\n      }\n\n      var deltaX = toX - center.x;\n      var deltaY = toY - center.y;\n\n      if (deltaX || deltaY) {\n        if (this.options.speed) {\n          if (this.options.acceleration) {\n            var _angle = Math.atan2(toY - center.y, toX - center.x);\n\n            var _distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\n            if (_distance) {\n              var decelerationDistance = (Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2)) / (2 * this.options.acceleration);\n\n              if (_distance > decelerationDistance) {\n                this.velocity = {\n                  x: Math.min(this.velocity.x + this.options.acceleration * elapsed, this.options.speed),\n                  y: Math.min(this.velocity.y + this.options.acceleration * elapsed, this.options.speed)\n                };\n              } else {\n                this.velocity = {\n                  x: Math.max(this.velocity.x - this.options.acceleration * this.options.speed, 0),\n                  y: Math.max(this.velocity.y - this.options.acceleration * this.options.speed, 0)\n                };\n              }\n\n              var changeX = Math.cos(_angle) * this.velocity.x;\n              var changeY = Math.sin(_angle) * this.velocity.y;\n              var x = Math.abs(changeX) > Math.abs(deltaX) ? toX : center.x + changeX;\n              var y = Math.abs(changeY) > Math.abs(deltaY) ? toY : center.y + changeY;\n              this.parent.moveCenter(x, y);\n              this.parent.emit('moved', {\n                viewport: this.parent,\n                type: 'follow'\n              });\n            }\n          } else {\n            var _angle2 = Math.atan2(toY - center.y, toX - center.x);\n\n            var _changeX = Math.cos(_angle2) * this.options.speed;\n\n            var _changeY = Math.sin(_angle2) * this.options.speed;\n\n            var _x = Math.abs(_changeX) > Math.abs(deltaX) ? toX : center.x + _changeX;\n\n            var _y = Math.abs(_changeY) > Math.abs(deltaY) ? toY : center.y + _changeY;\n\n            this.parent.moveCenter(_x, _y);\n            this.parent.emit('moved', {\n              viewport: this.parent,\n              type: 'follow'\n            });\n          }\n        } else {\n          this.parent.moveCenter(toX, toY);\n          this.parent.emit('moved', {\n            viewport: this.parent,\n            type: 'follow'\n          });\n        }\n      }\n    }\n  }]);\n\n  return Follow;\n}(Plugin);\n/**\r\n * @typedef WheelOptions\r\n * @property {number} [percent=0.1] percent to scroll with each spin\r\n * @property {number} [smooth] smooth the zooming by providing the number of frames to zoom between wheel spins\r\n * @property {boolean} [interrupt=true] stop smoothing with any user input on the viewport\r\n * @property {boolean} [reverse] reverse the direction of the scroll\r\n * @property {PIXI.Point} [center] place this point at center during zoom instead of current mouse position\r\n */\n\n\nvar wheelOptions = {\n  percent: 0.1,\n  smooth: false,\n  interrupt: true,\n  reverse: false,\n  center: null\n};\n\nvar Wheel =\n/*#__PURE__*/\nfunction (_Plugin10) {\n  _inherits(Wheel, _Plugin10);\n\n  /**\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {WheelOptions} [options]\r\n   * @event wheel({wheel: {dx, dy, dz}, event, viewport})\r\n   */\n  function Wheel(parent) {\n    var _this12;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Wheel);\n\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(Wheel).call(this, parent));\n    _this12.options = Object.assign({}, wheelOptions, options);\n    return _this12;\n  }\n\n  _createClass(Wheel, [{\n    key: \"down\",\n    value: function down() {\n      if (this.options.interrupt) {\n        this.smoothing = null;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.smoothing) {\n        var point = this.smoothingCenter;\n        var change = this.smoothing;\n        var oldPoint;\n\n        if (!this.options.center) {\n          oldPoint = this.parent.toLocal(point);\n        }\n\n        this.parent.scale.x += change.x;\n        this.parent.scale.y += change.y;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'wheel'\n        });\n        var clamp = this.parent.plugins.get('clamp-zoom');\n\n        if (clamp) {\n          clamp.clamp();\n        }\n\n        if (this.options.center) {\n          this.parent.moveCenter(this.options.center);\n        } else {\n          var newPoint = this.parent.toGlobal(oldPoint);\n          this.parent.x += point.x - newPoint.x;\n          this.parent.y += point.y - newPoint.y;\n        }\n\n        this.smoothingCount++;\n\n        if (this.smoothingCount >= this.options.smooth) {\n          this.smoothing = null;\n        }\n      }\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel(e) {\n      if (this.paused) {\n        return;\n      }\n\n      var point = this.parent.input.getPointerPosition(e);\n      var sign = this.options.reverse ? -1 : 1;\n      var step = sign * -e.deltaY * (e.deltaMode ? 120 : 1) / 500;\n      var change = Math.pow(2, (1 + this.options.percent) * step);\n\n      if (this.options.smooth) {\n        var original = {\n          x: this.smoothing ? this.smoothing.x * (this.options.smooth - this.smoothingCount) : 0,\n          y: this.smoothing ? this.smoothing.y * (this.options.smooth - this.smoothingCount) : 0\n        };\n        this.smoothing = {\n          x: ((this.parent.scale.x + original.x) * change - this.parent.scale.x) / this.options.smooth,\n          y: ((this.parent.scale.y + original.y) * change - this.parent.scale.y) / this.options.smooth\n        };\n        this.smoothingCount = 0;\n        this.smoothingCenter = point;\n      } else {\n        var oldPoint;\n\n        if (!this.options.center) {\n          oldPoint = this.parent.toLocal(point);\n        }\n\n        this.parent.scale.x *= change;\n        this.parent.scale.y *= change;\n        this.parent.emit('zoomed', {\n          viewport: this.parent,\n          type: 'wheel'\n        });\n        var clamp = this.parent.plugins.get('clamp-zoom');\n\n        if (clamp) {\n          clamp.clamp();\n        }\n\n        if (this.options.center) {\n          this.parent.moveCenter(this.options.center);\n        } else {\n          var newPoint = this.parent.toGlobal(oldPoint);\n          this.parent.x += point.x - newPoint.x;\n          this.parent.y += point.y - newPoint.y;\n        }\n      }\n\n      this.parent.emit('moved', {\n        viewport: this.parent,\n        type: 'wheel'\n      });\n      this.parent.emit('wheel', {\n        wheel: {\n          dx: e.deltaX,\n          dy: e.deltaY,\n          dz: e.deltaZ\n        },\n        event: e,\n        viewport: this.parent\n      });\n\n      if (!this.parent.options.passiveWheel) {\n        return true;\n      }\n    }\n  }]);\n\n  return Wheel;\n}(Plugin);\n/**\r\n * @typedef MouseEdgesOptions\r\n * @property {number} [radius] distance from center of screen in screen pixels\r\n * @property {number} [distance] distance from all sides in screen pixels\r\n * @property {number} [top] alternatively, set top distance (leave unset for no top scroll)\r\n * @property {number} [bottom] alternatively, set bottom distance (leave unset for no top scroll)\r\n * @property {number} [left] alternatively, set left distance (leave unset for no top scroll)\r\n * @property {number} [right] alternatively, set right distance (leave unset for no top scroll)\r\n * @property {number} [speed=8] speed in pixels/frame to scroll viewport\r\n * @property {boolean} [reverse] reverse direction of scroll\r\n * @property {boolean} [noDecelerate] don't use decelerate plugin even if it's installed\r\n * @property {boolean} [linear] if using radius, use linear movement (+/- 1, +/- 1) instead of angled movement (Math.cos(angle from center), Math.sin(angle from center))\r\n * @property {boolean} [allowButtons] allows plugin to continue working even when there's a mousedown event\r\n */\n\n\nvar mouseEdgesOptions = {\n  radius: null,\n  distance: null,\n  top: null,\n  bottom: null,\n  left: null,\n  right: null,\n  speed: 8,\n  reverse: false,\n  noDecelerate: false,\n  linear: false,\n  allowButtons: false\n};\n\nvar MouseEdges =\n/*#__PURE__*/\nfunction (_Plugin11) {\n  _inherits(MouseEdges, _Plugin11);\n\n  /**\r\n   * Scroll viewport when mouse hovers near one of the edges.\r\n   * @private\r\n   * @param {Viewport} parent\r\n   * @param {MouseEdgeOptions} [options]\r\n   * @event mouse-edge-start(Viewport) emitted when mouse-edge starts\r\n   * @event mouse-edge-end(Viewport) emitted when mouse-edge ends\r\n   */\n  function MouseEdges(parent) {\n    var _this13;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MouseEdges);\n\n    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(MouseEdges).call(this, parent));\n    _this13.options = Object.assign({}, mouseEdgesOptions, options);\n    _this13.reverse = _this13.options.reverse ? 1 : -1;\n    _this13.radiusSquared = Math.pow(_this13.options.radius, 2);\n\n    _this13.resize();\n\n    return _this13;\n  }\n\n  _createClass(MouseEdges, [{\n    key: \"resize\",\n    value: function resize() {\n      var distance = this.options.distance;\n\n      if (distance !== null) {\n        this.left = distance;\n        this.top = distance;\n        this.right = this.parent.worldScreenWidth - distance;\n        this.bottom = this.parent.worldScreenHeight - distance;\n      } else if (!this.radius) {\n        this.left = this.options.left;\n        this.top = this.options.top;\n        this.right = this.options.right === null ? null : this.parent.worldScreenWidth - this.options.right;\n        this.bottom = this.options.bottom === null ? null : this.parent.worldScreenHeight - this.options.bottom;\n      }\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      if (!this.options.allowButtons) {\n        this.horizontal = this.vertical = null;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(event) {\n      if (event.data.pointerType !== 'mouse' && event.data.identifier !== 1 || !this.options.allowButtons && event.data.buttons !== 0) {\n        return;\n      }\n\n      var x = event.data.global.x;\n      var y = event.data.global.y;\n\n      if (this.radiusSquared) {\n        var center = this.parent.toScreen(this.parent.center);\n        var distance = Math.pow(center.x - x, 2) + Math.pow(center.y - y, 2);\n\n        if (distance >= this.radiusSquared) {\n          var angle = Math.atan2(center.y - y, center.x - x);\n\n          if (this.options.linear) {\n            this.horizontal = Math.round(Math.cos(angle)) * this.options.speed * this.reverse * (60 / 1000);\n            this.vertical = Math.round(Math.sin(angle)) * this.options.speed * this.reverse * (60 / 1000);\n          } else {\n            this.horizontal = Math.cos(angle) * this.options.speed * this.reverse * (60 / 1000);\n            this.vertical = Math.sin(angle) * this.options.speed * this.reverse * (60 / 1000);\n          }\n        } else {\n          if (this.horizontal) {\n            this.decelerateHorizontal();\n          }\n\n          if (this.vertical) {\n            this.decelerateVertical();\n          }\n\n          this.horizontal = this.vertical = 0;\n        }\n      } else {\n        if (this.left !== null && x < this.left) {\n          this.horizontal = 1 * this.reverse * this.options.speed * (60 / 1000);\n        } else if (this.right !== null && x > this.right) {\n          this.horizontal = -1 * this.reverse * this.options.speed * (60 / 1000);\n        } else {\n          this.decelerateHorizontal();\n          this.horizontal = 0;\n        }\n\n        if (this.top !== null && y < this.top) {\n          this.vertical = 1 * this.reverse * this.options.speed * (60 / 1000);\n        } else if (this.bottom !== null && y > this.bottom) {\n          this.vertical = -1 * this.reverse * this.options.speed * (60 / 1000);\n        } else {\n          this.decelerateVertical();\n          this.vertical = 0;\n        }\n      }\n    }\n  }, {\n    key: \"decelerateHorizontal\",\n    value: function decelerateHorizontal() {\n      var decelerate = this.parent.plugins.get('decelerate');\n\n      if (this.horizontal && decelerate && !this.options.noDecelerate) {\n        decelerate.activate({\n          x: this.horizontal * this.options.speed * this.reverse / (1000 / 60)\n        });\n      }\n    }\n  }, {\n    key: \"decelerateVertical\",\n    value: function decelerateVertical() {\n      var decelerate = this.parent.plugins.get('decelerate');\n\n      if (this.vertical && decelerate && !this.options.noDecelerate) {\n        decelerate.activate({\n          y: this.vertical * this.options.speed * this.reverse / (1000 / 60)\n        });\n      }\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      if (this.horizontal) {\n        this.decelerateHorizontal();\n      }\n\n      if (this.vertical) {\n        this.decelerateVertical();\n      }\n\n      this.horizontal = this.vertical = null;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.paused) {\n        return;\n      }\n\n      if (this.horizontal || this.vertical) {\n        var center = this.parent.center;\n\n        if (this.horizontal) {\n          center.x += this.horizontal * this.options.speed;\n        }\n\n        if (this.vertical) {\n          center.y += this.vertical * this.options.speed;\n        }\n\n        this.parent.moveCenter(center);\n        this.parent.emit('moved', {\n          viewport: this.parent,\n          type: 'mouse-edges'\n        });\n      }\n    }\n  }]);\n\n  return MouseEdges;\n}(Plugin);\n/**\r\n * @typedef {object} ViewportOptions\r\n * @property {number} [screenWidth=window.innerWidth]\r\n * @property {number} [screenHeight=window.innerHeight]\r\n * @property {number} [worldWidth=this.width]\r\n * @property {number} [worldHeight=this.height]\r\n * @property {number} [threshold=5] number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event\r\n * @property {boolean} [passiveWheel=true] whether the 'wheel' event is set to passive (note: if false, e.preventDefault() will be called when wheel is used over the viewport)\r\n * @property {boolean} [stopPropagation=false] whether to stopPropagation of events that impact the viewport (except wheel events, see options.passiveWheel)\r\n * @property {HitArea} [forceHitArea] change the default hitArea from world size to a new value\r\n * @property {boolean} [noTicker] set this if you want to manually call update() function on each frame\r\n * @property {PIXI.Ticker} [ticker=PIXI.Ticker.shared] use this PIXI.ticker for updates\r\n * @property {PIXI.InteractionManager} [interaction=null] InteractionManager, available from instantiated WebGLRenderer/CanvasRenderer.plugins.interaction - used to calculate pointer postion relative to canvas location on screen\r\n * @property {HTMLElement} [divWheel=document.body] div to attach the wheel event\r\n * @property {boolean} [disableOnContextMenu] remove oncontextmenu=() => {} from the divWheel element\r\n */\n\n\nvar viewportOptions = {\n  screenWidth: window.innerWidth,\n  screenHeight: window.innerHeight,\n  worldWidth: null,\n  worldHeight: null,\n  threshold: 5,\n  passiveWheel: true,\n  stopPropagation: false,\n  forceHitArea: null,\n  noTicker: false,\n  interaction: null,\n  disableOnContextMenu: false\n};\n/**\r\n * Main class to use when creating a Viewport\r\n */\n\nvar Viewport =\n/*#__PURE__*/\nfunction (_Container) {\n  _inherits(Viewport, _Container);\n\n  /**\r\n   * @param {ViewportOptions} [options]\r\n   * @fires clicked\r\n   * @fires drag-start\r\n   * @fires drag-end\r\n   * @fires drag-remove\r\n   * @fires pinch-start\r\n   * @fires pinch-end\r\n   * @fires pinch-remove\r\n   * @fires snap-start\r\n   * @fires snap-end\r\n   * @fires snap-remove\r\n   * @fires snap-zoom-start\r\n   * @fires snap-zoom-end\r\n   * @fires snap-zoom-remove\r\n   * @fires bounce-x-start\r\n   * @fires bounce-x-end\r\n   * @fires bounce-y-start\r\n   * @fires bounce-y-end\r\n   * @fires bounce-remove\r\n   * @fires wheel\r\n   * @fires wheel-remove\r\n   * @fires wheel-scroll\r\n   * @fires wheel-scroll-remove\r\n   * @fires mouse-edge-start\r\n   * @fires mouse-edge-end\r\n   * @fires mouse-edge-remove\r\n   * @fires moved\r\n   * @fires moved-end\r\n   * @fires zoomed\r\n   * @fires zoomed-end\r\n   * @fires frame-end\r\n   */\n  function Viewport() {\n    var _this14;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Viewport);\n\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Viewport).call(this));\n    _this14.options = Object.assign({}, viewportOptions, options); // needed to pull this out of viewportOptions because of pixi.js v4 support (which changed from PIXI.ticker.shared to PIXI.Ticker.shared...sigh)\n\n    if (options.ticker) {\n      _this14.options.ticker = options.ticker;\n    } else {\n      // to avoid Rollup transforming our import, save pixi namespace in a variable\n      // from here: https://github.com/pixijs/pixi.js/issues/5757\n      var ticker;\n      var pixiNS = PIXI;\n\n      if (parseInt(/^(\\d+)\\./.exec(VERSION)[1]) < 5) {\n        ticker = pixiNS.ticker.shared;\n      } else {\n        ticker = pixiNS.Ticker.shared;\n      }\n\n      _this14.options.ticker = options.ticker || ticker;\n    }\n    /** @type {number} */\n\n\n    _this14.screenWidth = _this14.options.screenWidth;\n    /** @type {number} */\n\n    _this14.screenHeight = _this14.options.screenHeight;\n    _this14._worldWidth = _this14.options.worldWidth;\n    _this14._worldHeight = _this14.options.worldHeight;\n    _this14.forceHitArea = _this14.options.forceHitArea;\n    /**\r\n     * number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event\r\n     * @type {number}\r\n     */\n\n    _this14.threshold = _this14.options.threshold;\n    _this14.options.divWheel = _this14.options.divWheel || document.body;\n\n    if (_this14.options.disableOnContextMenu) {\n      _this14.options.divWheel.oncontextmenu = function (e) {\n        return e.preventDefault();\n      };\n    }\n\n    if (!_this14.options.noTicker) {\n      _this14.tickerFunction = function () {\n        return _this14.update(_this14.options.ticker.elapsedMS);\n      };\n\n      _this14.options.ticker.add(_this14.tickerFunction);\n    }\n\n    _this14.input = new InputManager(_assertThisInitialized(_this14));\n    /**\r\n     * Use this to add user plugins or access existing plugins (e.g., to pause, resume, or remove them)\r\n     * @type {PluginManager}\r\n     */\n\n    _this14.plugins = new PluginManager(_assertThisInitialized(_this14));\n    return _this14;\n  }\n  /**\r\n   * overrides PIXI.Container's destroy to also remove the 'wheel' and PIXI.Ticker listeners\r\n   * @param {(object|boolean)} [options] - Options parameter. A boolean will act as if all options have been set to that value\r\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy method called as well. 'options' will be passed on to those calls.\r\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true. Should it destroy the texture of the child sprite\r\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true. Should it destroy the base texture of the child sprite     */\n\n\n  _createClass(Viewport, [{\n    key: \"destroy\",\n    value: function destroy(options) {\n      if (!this.options.noTicker) {\n        this.options.ticker.remove(this.tickerFunction);\n      }\n\n      this.input.destroy();\n\n      _get(_getPrototypeOf(Viewport.prototype), \"destroy\", this).call(this, options);\n    }\n    /**\r\n     * update viewport on each frame\r\n     * by default, you do not need to call this unless you set options.noTicker=true\r\n     * @param {number} elapsed time in milliseconds since last update\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(elapsed) {\n      if (!this.pause) {\n        this.plugins.update(elapsed);\n\n        if (this.lastViewport) {\n          // check for moved-end event\n          if (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y) {\n            this.moving = true;\n          } else {\n            if (this.moving) {\n              this.emit('moved-end', this);\n              this.moving = false;\n            }\n          } // check for zoomed-end event\n\n\n          if (this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y) {\n            this.zooming = true;\n          } else {\n            if (this.zooming) {\n              this.emit('zoomed-end', this);\n              this.zooming = false;\n            }\n          }\n        }\n\n        if (!this.forceHitArea) {\n          this._hitAreaDefault = new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n          this.hitArea = this._hitAreaDefault;\n        }\n\n        this._dirty = this._dirty || !this.lastViewport || this.lastViewport.x !== this.x || this.lastViewport.y !== this.y || this.lastViewport.scaleX !== this.scale.x || this.lastViewport.scaleY !== this.scale.y;\n        this.lastViewport = {\n          x: this.x,\n          y: this.y,\n          scaleX: this.scale.x,\n          scaleY: this.scale.y\n        };\n        this.emit('frame-end', this);\n      }\n    }\n    /**\r\n     * use this to set screen and world sizes--needed for pinch/wheel/clamp/bounce\r\n     * @param {number} [screenWidth=window.innerWidth]\r\n     * @param {number} [screenHeight=window.innerHeight]\r\n     * @param {number} [worldWidth]\r\n     * @param {number} [worldHeight]\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var screenWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.innerWidth;\n      var screenHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.innerHeight;\n      var worldWidth = arguments.length > 2 ? arguments[2] : undefined;\n      var worldHeight = arguments.length > 3 ? arguments[3] : undefined;\n      this.screenWidth = screenWidth;\n      this.screenHeight = screenHeight;\n\n      if (typeof worldWidth !== 'undefined') {\n        this._worldWidth = worldWidth;\n      }\n\n      if (typeof worldHeight !== 'undefined') {\n        this._worldHeight = worldHeight;\n      }\n\n      this.plugins.resize();\n    }\n    /**\r\n     * world width in pixels\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"getVisibleBounds\",\n\n    /**\r\n     * get visible bounds of viewport\r\n     * @returns {PIXI.Rectangle}\r\n     */\n    value: function getVisibleBounds() {\n      return new Rectangle(this.left, this.top, this.worldScreenWidth, this.worldScreenHeight);\n    }\n    /**\r\n     * change coordinates from screen to world\r\n     * @param {(number|PIXI.Point)} x or point\r\n     * @param {number} [y]\r\n     * @return {PIXI.Point}\r\n     */\n\n  }, {\n    key: \"toWorld\",\n    value: function toWorld(x, y) {\n      if (arguments.length === 2) {\n        return this.toLocal(new Point(x, y));\n      } else {\n        return this.toLocal(x);\n      }\n    }\n    /**\r\n     * change coordinates from world to screen\r\n     * @param {(number|PIXI.Point)} x or point\r\n     * @param {number} [y]\r\n     * @return {PIXI.Point}\r\n     */\n\n  }, {\n    key: \"toScreen\",\n    value: function toScreen(x, y) {\n      if (arguments.length === 2) {\n        return this.toGlobal(new Point(x, y));\n      } else {\n        return this.toGlobal(x);\n      }\n    }\n    /**\r\n     * screen width in world coordinates\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"moveCenter\",\n\n    /**\r\n     * move center of viewport to point\r\n     * @param {(number|PIXI.Point)} x or point\r\n     * @param {number} [y]\r\n     * @return {Viewport} this\r\n     */\n    value: function moveCenter() {\n      var x, y;\n\n      if (!isNaN(arguments[0])) {\n        x = arguments[0];\n        y = arguments[1];\n      } else {\n        x = arguments[0].x;\n        y = arguments[0].y;\n      }\n\n      this.position.set((this.worldScreenWidth / 2 - x) * this.scale.x, (this.worldScreenHeight / 2 - y) * this.scale.y);\n      this.plugins.reset();\n      this.dirty = true;\n      return this;\n    }\n    /**\r\n     * top-left corner of Viewport\r\n     * @type {PIXI.Point}\r\n     */\n\n  }, {\n    key: \"moveCorner\",\n\n    /**\r\n     * move viewport's top-left corner; also clamps and resets decelerate and bounce (as needed)\r\n     * @param {(number|PIXI.Point)} x or point\r\n     * @param {number} [y]\r\n     * @return {Viewport} this\r\n     */\n    value: function moveCorner(x, y) {\n      if (arguments.length === 1) {\n        this.position.set(-x.x * this.scale.x, -x.y * this.scale.y);\n      } else {\n        this.position.set(-x * this.scale.x, -y * this.scale.y);\n      }\n\n      this.plugins.reset();\n      return this;\n    }\n    /**\r\n     * change zoom so the width fits in the viewport\r\n     * @param {number} [width=this.worldWidth] in world coordinates\r\n     * @param {boolean} [center] maintain the same center\r\n     * @param {boolean} [scaleY=true] whether to set scaleY=scaleX\r\n     * @param {boolean} [noClamp] whether to disable clamp-zoom\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"fitWidth\",\n    value: function fitWidth(width, center) {\n      var scaleY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var noClamp = arguments.length > 3 ? arguments[3] : undefined;\n      var save;\n\n      if (center) {\n        save = this.center;\n      }\n\n      this.scale.x = this.screenWidth / width;\n\n      if (scaleY) {\n        this.scale.y = this.scale.x;\n      }\n\n      var clampZoom = this.plugins.get('clamp-zoom');\n\n      if (!noClamp && clampZoom) {\n        clampZoom.clamp();\n      }\n\n      if (center) {\n        this.moveCenter(save);\n      }\n\n      return this;\n    }\n    /**\r\n     * change zoom so the height fits in the viewport\r\n     * @param {number} [height=this.worldHeight] in world coordinates\r\n     * @param {boolean} [center] maintain the same center of the screen after zoom\r\n     * @param {boolean} [scaleX=true] whether to set scaleX = scaleY\r\n     * @param {boolean} [noClamp] whether to disable clamp-zoom\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"fitHeight\",\n    value: function fitHeight(height, center) {\n      var scaleX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var noClamp = arguments.length > 3 ? arguments[3] : undefined;\n      var save;\n\n      if (center) {\n        save = this.center;\n      }\n\n      this.scale.y = this.screenHeight / height;\n\n      if (scaleX) {\n        this.scale.x = this.scale.y;\n      }\n\n      var clampZoom = this.plugins.get('clamp-zoom');\n\n      if (!noClamp && clampZoom) {\n        clampZoom.clamp();\n      }\n\n      if (center) {\n        this.moveCenter(save);\n      }\n\n      return this;\n    }\n    /**\r\n     * change zoom so it fits the entire world in the viewport\r\n     * @param {boolean} center maintain the same center of the screen after zoom\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"fitWorld\",\n    value: function fitWorld(center) {\n      var save;\n\n      if (center) {\n        save = this.center;\n      }\n\n      this.scale.x = this.screenWidth / this.worldWidth;\n      this.scale.y = this.screenHeight / this.worldHeight;\n\n      if (this.scale.x < this.scale.y) {\n        this.scale.y = this.scale.x;\n      } else {\n        this.scale.x = this.scale.y;\n      }\n\n      var clampZoom = this.plugins.get('clamp-zoom');\n\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n\n      if (center) {\n        this.moveCenter(save);\n      }\n\n      return this;\n    }\n    /**\r\n     * change zoom so it fits the size or the entire world in the viewport\r\n     * @param {boolean} [center] maintain the same center of the screen after zoom\r\n     * @param {number} [width=this.worldWidth] desired width\r\n     * @param {number} [height=this.worldHeight] desired height\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"fit\",\n    value: function fit(center) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.worldWidth;\n      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.worldHeight;\n      var save;\n\n      if (center) {\n        save = this.center;\n      }\n\n      this.scale.x = this.screenWidth / width;\n      this.scale.y = this.screenHeight / height;\n\n      if (this.scale.x < this.scale.y) {\n        this.scale.y = this.scale.x;\n      } else {\n        this.scale.x = this.scale.y;\n      }\n\n      var clampZoom = this.plugins.get('clamp-zoom');\n\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n\n      if (center) {\n        this.moveCenter(save);\n      }\n\n      return this;\n    }\n    /**\r\n     * zoom viewport to specific value\r\n     * @param {number} scale value (e.g., 1 would be 100%, 0.25 would be 25%)\r\n     * @param {boolean} [center] maintain the same center of the screen after zoom\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(scale, center) {\n      var save;\n\n      if (center) {\n        save = this.center;\n      }\n\n      this.scale.set(scale);\n      var clampZoom = this.plugins.get('clamp-zoom');\n\n      if (clampZoom) {\n        clampZoom.clamp();\n      }\n\n      if (center) {\n        this.moveCenter(save);\n      }\n\n      return this;\n    }\n    /**\r\n     * zoom viewport by a certain percent (in both x and y direction)\r\n     * @param {number} percent change (e.g., 0.25 would increase a starting scale of 1.0 to 1.25)\r\n     * @param {boolean} [center] maintain the same center of the screen after zoom\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"zoomPercent\",\n    value: function zoomPercent(percent, center) {\n      return this.setZoom(this.scale.x + this.scale.x * percent, center);\n    }\n    /**\r\n     * zoom viewport by increasing/decreasing width by a certain number of pixels\r\n     * @param {number} change in pixels\r\n     * @param {boolean} [center] maintain the same center of the screen after zoom\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"zoom\",\n    value: function zoom(change, center) {\n      this.fitWidth(change + this.worldScreenWidth, center);\n      return this;\n    }\n    /**\r\n     * changes scale of viewport and maintains center of viewport--same as calling setScale(scale, true)\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"snapZoom\",\n\n    /**\r\n     * @param {SnapZoomOptions} options\r\n     */\n    value: function snapZoom(options) {\n      this.plugins.add('snap-zoom', new SnapZoom(this, options));\n      return this;\n    }\n    /**\r\n     * is container out of world bounds\r\n     * @returns {OutOfBounds}\r\n     */\n\n  }, {\n    key: \"OOB\",\n    value: function OOB() {\n      return {\n        left: this.left < 0,\n        right: this.right > this.worldWidth,\n        top: this.top < 0,\n        bottom: this.bottom > this._worldHeight,\n        cornerPoint: new Point(this.worldWidth * this.scale.x - this.screenWidth, this.worldHeight * this.scale.y - this.screenHeight)\n      };\n    }\n    /**\r\n     * world coordinates of the right edge of the screen\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"drag\",\n\n    /**\r\n     * enable one-finger touch to drag\r\n     * NOTE: if you expect users to use right-click dragging, you should enable viewport.options.disableOnContextMenu to avoid the context menu popping up on each right-click drag\r\n     * @param {DragOptions} [options]\r\n     * @returns {Viewport} this\r\n     */\n    value: function drag(options) {\n      this.plugins.add('drag', new Drag(this, options));\n      return this;\n    }\n    /**\r\n     * clamp to world boundaries or other provided boundaries\r\n     * NOTES:\r\n     *   clamp is disabled if called with no options; use { direction: 'all' } for all edge clamping\r\n     *   screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\r\n     * @param {ClampOptions} [options]\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"clamp\",\n    value: function clamp(options) {\n      this.plugins.add('clamp', new Clamp(this, options));\n      return this;\n    }\n    /**\r\n     * decelerate after a move\r\n     * NOTE: this fires 'moved' event during deceleration\r\n     * @param {DecelerateOptions} [options]\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"decelerate\",\n    value: function decelerate(options) {\n      this.plugins.add('decelerate', new Decelerate(this, options));\n      return this;\n    }\n    /**\r\n     * bounce on borders\r\n     * NOTES:\r\n     *    screenWidth, screenHeight, worldWidth, and worldHeight needs to be set for this to work properly\r\n     *    fires 'moved', 'bounce-x-start', 'bounce-y-start', 'bounce-x-end', and 'bounce-y-end' events\r\n     * @param {object} [options]\r\n     * @param {string} [options.sides=all] all, horizontal, vertical, or combination of top, bottom, right, left (e.g., 'top-bottom-right')\r\n     * @param {number} [options.friction=0.5] friction to apply to decelerate if active\r\n     * @param {number} [options.time=150] time in ms to finish bounce\r\n     * @param {string|function} [options.ease=easeInOutSine] ease function or name (see http://easings.net/ for supported names)\r\n     * @param {string} [options.underflow=center] (top/bottom/center and left/right/center, or center) where to place world if too small for screen\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"bounce\",\n    value: function bounce(options) {\n      this.plugins.add('bounce', new Bounce(this, options));\n      return this;\n    }\n    /**\r\n     * enable pinch to zoom and two-finger touch to drag\r\n     * @param {PinchOptions} [options]\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"pinch\",\n    value: function pinch(options) {\n      this.plugins.add('pinch', new Pinch(this, options));\n      return this;\n    }\n    /**\r\n     * snap to a point\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {SnapOptions} [options]\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"snap\",\n    value: function snap(x, y, options) {\n      this.plugins.add('snap', new Snap(this, x, y, options));\n      return this;\n    }\n    /**\r\n     * follow a target\r\n     * NOTES:\r\n     *    uses the (x, y) as the center to follow; for PIXI.Sprite to work properly, use sprite.anchor.set(0.5)\r\n     *    options.acceleration is not perfect as it doesn't know the velocity of the target\r\n     *    it adds acceleration to the start of movement and deceleration to the end of movement when the target is stopped\r\n     *    fires 'moved' event\r\n     * @param {PIXI.DisplayObject} target to follow\r\n     * @param {FollowOptions} [options]\r\n     * @returns {Viewport} this\r\n     */\n\n  }, {\n    key: \"follow\",\n    value: function follow(target, options) {\n      this.plugins.add('follow', new Follow(this, target, options));\n      return this;\n    }\n    /**\r\n     * zoom using mouse wheel\r\n     * @param {WheelOptions} [options]\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"wheel\",\n    value: function wheel(options) {\n      this.plugins.add('wheel', new Wheel(this, options));\n      return this;\n    }\n    /**\r\n     * enable clamping of zoom to constraints\r\n     * @param {ClampZoomOptions} [options]\r\n     * @return {Viewport} this\r\n     */\n\n  }, {\n    key: \"clampZoom\",\n    value: function clampZoom(options) {\n      this.plugins.add('clamp-zoom', new ClampZoom(this, options));\n      return this;\n    }\n    /**\r\n     * Scroll viewport when mouse hovers near one of the edges or radius-distance from center of screen.\r\n     * NOTE: fires 'moved' event\r\n     * @param {MouseEdgesOptions} [options]\r\n     */\n\n  }, {\n    key: \"mouseEdges\",\n    value: function mouseEdges(options) {\n      this.plugins.add('mouse-edges', new MouseEdges(this, options));\n      return this;\n    }\n    /**\r\n     * pause viewport (including animation updates such as decelerate)\r\n     * @type {boolean}\r\n     */\n\n  }, {\n    key: \"ensureVisible\",\n\n    /**\r\n     * move the viewport so the bounding box is visible\r\n     * @param {number} x - left\r\n     * @param {number} y - top\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\n    value: function ensureVisible(x, y, width, height) {\n      if (x < this.left) {\n        this.left = x;\n      } else if (x + width > this.right) {\n        this.right = x + width;\n      }\n\n      if (y < this.top) {\n        this.top = y;\n      } else if (y + height > this.bottom) {\n        this.bottom = y + height;\n      }\n    }\n  }, {\n    key: \"worldWidth\",\n    get: function get() {\n      if (this._worldWidth) {\n        return this._worldWidth;\n      } else {\n        return this.width / this.scale.x;\n      }\n    },\n    set: function set(value) {\n      this._worldWidth = value;\n      this.plugins.resize();\n    }\n    /**\r\n     * world height in pixels\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"worldHeight\",\n    get: function get() {\n      if (this._worldHeight) {\n        return this._worldHeight;\n      } else {\n        return this.height / this.scale.y;\n      }\n    },\n    set: function set(value) {\n      this._worldHeight = value;\n      this.plugins.resize();\n    }\n  }, {\n    key: \"worldScreenWidth\",\n    get: function get() {\n      return this.screenWidth / this.scale.x;\n    }\n    /**\r\n     * screen height in world coordinates\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"worldScreenHeight\",\n    get: function get() {\n      return this.screenHeight / this.scale.y;\n    }\n    /**\r\n     * world width in screen coordinates\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"screenWorldWidth\",\n    get: function get() {\n      return this.worldWidth * this.scale.x;\n    }\n    /**\r\n     * world height in screen coordinates\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"screenWorldHeight\",\n    get: function get() {\n      return this.worldHeight * this.scale.y;\n    }\n    /**\r\n     * center of screen in world coordinates\r\n     * @type {PIXI.Point}\r\n     */\n\n  }, {\n    key: \"center\",\n    get: function get() {\n      return new Point(this.worldScreenWidth / 2 - this.x / this.scale.x, this.worldScreenHeight / 2 - this.y / this.scale.y);\n    },\n    set: function set(value) {\n      this.moveCenter(value);\n    }\n  }, {\n    key: \"corner\",\n    get: function get() {\n      return new Point(-this.x / this.scale.x, -this.y / this.scale.y);\n    },\n    set: function set(value) {\n      this.moveCorner(value);\n    }\n  }, {\n    key: \"scaled\",\n    set: function set(scale) {\n      this.setZoom(scale, true);\n    },\n    get: function get() {\n      return this.scale.x;\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      return -this.x / this.scale.x + this.worldScreenWidth;\n    },\n    set: function set(value) {\n      this.x = -value * this.scale.x + this.screenWidth;\n      this.plugins.reset();\n    }\n    /**\r\n     * world coordinates of the left edge of the screen\r\n     * @type { number }\r\n     */\n\n  }, {\n    key: \"left\",\n    get: function get() {\n      return -this.x / this.scale.x;\n    },\n    set: function set(value) {\n      this.x = -value * this.scale.x;\n      this.plugins.reset();\n    }\n    /**\r\n     * world coordinates of the top edge of the screen\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"top\",\n    get: function get() {\n      return -this.y / this.scale.y;\n    },\n    set: function set(value) {\n      this.y = -value * this.scale.y;\n      this.plugins.reset();\n    }\n    /**\r\n     * world coordinates of the bottom edge of the screen\r\n     * @type {number}\r\n     */\n\n  }, {\n    key: \"bottom\",\n    get: function get() {\n      return -this.y / this.scale.y + this.worldScreenHeight;\n    },\n    set: function set(value) {\n      this.y = -value * this.scale.y + this.screenHeight;\n      this.plugins.reset();\n    }\n    /**\r\n     * determines whether the viewport is dirty (i.e., needs to be renderered to the screen because of a change)\r\n     * @type {boolean}\r\n     */\n\n  }, {\n    key: \"dirty\",\n    get: function get() {\n      return this._dirty;\n    },\n    set: function set(value) {\n      this._dirty = value;\n    }\n    /**\r\n     * permanently changes the Viewport's hitArea\r\n     * NOTE: if not set then hitArea = PIXI.Rectangle(Viewport.left, Viewport.top, Viewport.worldScreenWidth, Viewport.worldScreenHeight)\r\n     * @returns {HitArea}\r\n     */\n\n  }, {\n    key: \"forceHitArea\",\n    get: function get() {\n      return this._forceHitArea;\n    },\n    set: function set(value) {\n      if (value) {\n        this._forceHitArea = value;\n        this.hitArea = value;\n      } else {\n        this._forceHitArea = null;\n        this.hitArea = new Rectangle(0, 0, this.worldWidth, this.worldHeight);\n      }\n    }\n  }, {\n    key: \"pause\",\n    get: function get() {\n      return this._pause;\n    },\n    set: function set(value) {\n      this._pause = value;\n      this.lastViewport = null;\n      this.moving = false;\n      this.zooming = false;\n\n      if (value) {\n        this.input.pause();\n      }\n    }\n  }]);\n\n  return Viewport;\n}(Container);\n/**\r\n * fires after a mouse or touch click\r\n * @event Viewport#clicked\r\n * @type {object}\r\n * @property {PIXI.Point} screen\r\n * @property {PIXI.Point} world\r\n * @property {Viewport} viewport\r\n */\n\n/**\r\n * fires when a drag starts\r\n * @event Viewport#drag-start\r\n * @type {object}\r\n * @property {PIXI.Point} screen\r\n * @property {PIXI.Point} world\r\n * @property {Viewport} viewport\r\n */\n\n/**\r\n * fires when a drag ends\r\n * @event Viewport#drag-end\r\n * @type {object}\r\n * @property {PIXI.Point} screen\r\n * @property {PIXI.Point} world\r\n * @property {Viewport} viewport\r\n */\n\n/**\r\n * fires when a pinch starts\r\n * @event Viewport#pinch-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a pinch end\r\n * @event Viewport#pinch-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a snap starts\r\n * @event Viewport#snap-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a snap ends\r\n * @event Viewport#snap-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a snap-zoom starts\r\n * @event Viewport#snap-zoom-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a snap-zoom ends\r\n * @event Viewport#snap-zoom-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a bounce starts in the x direction\r\n * @event Viewport#bounce-x-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a bounce ends in the x direction\r\n * @event Viewport#bounce-x-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a bounce starts in the y direction\r\n * @event Viewport#bounce-y-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a bounce ends in the y direction\r\n * @event Viewport#bounce-y-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when for a mouse wheel event\r\n * @event Viewport#wheel\r\n * @type {object}\r\n * @property {object} wheel\r\n * @property {number} wheel.dx\r\n * @property {number} wheel.dy\r\n * @property {number} wheel.dz\r\n * @property {Viewport} viewport\r\n */\n\n/**\r\n * fires when a wheel-scroll occurs\r\n * @event Viewport#wheel-scroll\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when a mouse-edge starts to scroll\r\n * @event Viewport#mouse-edge-start\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when the mouse-edge scrolling ends\r\n * @event Viewport#mouse-edge-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when viewport moves through UI interaction, deceleration, or follow\r\n * @event Viewport#moved\r\n * @type {object}\r\n * @property {Viewport} viewport\r\n * @property {string} type (drag, snap, pinch, follow, bounce-x, bounce-y, clamp-x, clamp-y, decelerate, mouse-edges, wheel)\r\n */\n\n/**\r\n * fires when viewport moves through UI interaction, deceleration, or follow\r\n * @event Viewport#zoomed\r\n * @type {object}\r\n * @property {Viewport} viewport\r\n * @property {string} type (drag-zoom, pinch, wheel, clamp-zoom)\r\n */\n\n/**\r\n * fires when viewport stops moving\r\n * @event Viewport#moved-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n * fires when viewport stops zooming\r\n * @event Viewport#zoomed-end\r\n * @type {Viewport}\r\n */\n\n/**\r\n* fires at the end of an update frame\r\n* @event Viewport#frame-end\r\n* @type {Viewport}\r\n*/\n\n/** @typedef HitArea {(PIXI.Rectangle | PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.RoundedRectangle)} */\n\n/**\r\n * @typedef {Object} OutOfBounds\r\n * @private\r\n * @property {boolean} left\r\n * @property {boolean} right\r\n * @property {boolean} top\r\n * @property {boolean} bottom\r\n * @property {PIXI.Point} cornerPoint\r\n */\n\n/**\r\n * @typedef {Object} LastViewport\r\n * @private\r\n * @property {number} x\r\n * @property {number} y\r\n * @property {number} scaleX\r\n * @property {number} scaleY\r\n */\n\n\nexport { Plugin, Viewport };","map":null,"metadata":{},"sourceType":"module"}